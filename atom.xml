<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text"><![CDATA[Keith Smiley]]></title>
  
  <updated>2021-03-07T16:19:10-08:00</updated>
  <id>http://smileykeith.com/</id>
  <link rel="alternate" type="text/html" hreflang="en" href="http://smileykeith.com" />

  
  <link rel="self" type="application/atom+xml" href="http://smileykeith.com/atom.xml" />
  
  <rights>Copyright (c) 2021 Keith Smiley</rights>
  <generator uri="http://jekyllrb.com/" version="1.0.3">Jekyll</generator>

  
    <entry>
      <title type="html"><![CDATA[Supporting relative paths: XCTest failures in Xcode]]></title>
      <link rel="alternate" type="text/html" href="http://smileykeith.com/2021/03/04/supporting-relative-paths/" />
      <id>http://smileykeith.com/2021/03/04/supporting-relative-paths</id>
      <updated>2021-03-04T20:48:00-08:00</updated>
      <author>
        
          <name><![CDATA[Keith Smiley]]></name>
        
      </author>
      <content type="html">
        <![CDATA[<p>If you build your iOS app with an alternate build system such as
<a href="https://www.bazel.build">bazel</a>, it's likely that you use relative
paths, instead of absolute paths, for compilation.</p>

<p>Specifically, when building swift code, Xcode calls the compiler with
something like:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>swiftc [ARGS] /path/to/srcroot/path/to/file1.swift /path/to/srcroot/path/to/file2.swift
</code></pre></div></div>

<p>Where bazel will call the compiler with something like:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>swiftc [ARGS] path/to/file1.swift path/to/file2.swift
</code></pre></div></div>

<p>Normally, this difference is inconsequential, both compilations will
result in a similar enough output. So, the question is: Why would you
pick one over the other? For bazel, the answer lies in its core feature
of "hermeticity". In bazel's case, being hermetic means that given the
same inputs you always produce the same outputs. This means that
regardless of what machine you're building on, or what directory your
source is cloned in, the results should be the same. Because, those
details aren't considered important inputs in the build.</p>

<p>Unfortunately, in a few places, Xcode relies on paths being absolute.
Today, we'll look at how Xcode reports test failures in the UI.
Specifically the underlying
<a href="https://developer.apple.com/documentation/xctest/xctissue"><code class="highlighter-rouge">XCTIssue</code></a>
that <code class="highlighter-rouge">XCTest</code> creates is expected to be instantiated with an absolute
path. This absolute path is populated from the <code class="highlighter-rouge">#filePath</code> (previously
<code class="highlighter-rouge">#file</code>) keyword which is <em>supposed</em> to reference the absolute path of
the current source file.</p>

<p>The first question is: How does the Swift compiler know what the
absolute path of the current file is? It's easy when Xcode passes an
absolute path to the compiler. But, what if you pass a relative path? In
this case, the Swift compiler uses the directory passed with the
<code class="highlighter-rouge">-working-directory</code> argument to make the path absolute. It turns out if
you don't pass this argument, the compiler has no choice but to use the
relative path. This means the <code class="highlighter-rouge">#filePath</code> keyword ends up translating to
a relative path, which means the <code class="highlighter-rouge">XCTIssue</code> is created with a relative
path.</p>

<p>With relative paths when you run your tests in Xcode and they
fail, clicking the failure in the issue navigator doesn't do anything.
But, it's supposed to jump you to the test case that failed (FB8451256,
FB8454623).</p>

<p>So, how do we fix this? Luckily, we know the core issue is <code class="highlighter-rouge">XCTIssue</code> is
created with a relative path. Since <code class="highlighter-rouge">XCTIssue</code> instances are created as
part of our process, we can
<a href="https://nshipster.com/method-swizzling">swizzle</a> it to fix this.</p>

<p>Looking at the underlying <a href="https://developer.apple.com/documentation/xctest/xctsourcecodelocation"><code class="highlighter-rouge">XCTSourceCodeLocation</code>
docs</a>,
we can see there are 2 initializers we're potentially interested in.
Setting some quick breakpoints we can see that <code class="highlighter-rouge">XCTIssue</code> goes through
the <code class="highlighter-rouge">init(fileURL:lineNumber:)</code> initializer. When we inspect the
argument it receives in the debugger, we can see it's the relative path
we passed to the compiler. Knowing this, we can surmise that by
swizzling the initializer, and make the argument an absolute path, we
can satisfy Xcode's requirement. So, what path do we use? Using Xcode's
scheme environment variables, we can pass Xcode's <code class="highlighter-rouge">SRCROOT</code> through an
environment variable named the same thing:</p>

<p><img src="/images/srcroot.png" alt="" /></p>

<p>Make sure to have the "Expand Variables Based On" dropdown set to some
target (FB8454879) or the <code class="highlighter-rouge">$(SRCROOT)</code> string will be passed through
literally.</p>

<p>Now, for the swizzling:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>
<span class="kd">import</span> <span class="kt">XCTest</span>

<span class="c1">// NOTE: This path has to start with a / for fileURLWithPath to resolve it correctly as an absolute path</span>
<span class="kd">public</span> <span class="k">let</span> <span class="nv">kSourceRoot</span> <span class="o">=</span> <span class="kt">ProcessInfo</span><span class="o">.</span><span class="n">processInfo</span><span class="o">.</span><span class="n">environment</span><span class="p">[</span><span class="s">"SRCROOT"</span><span class="p">]</span><span class="o">!</span>

<span class="kd">private</span> <span class="kd">func</span> <span class="nf">remapFileURL</span><span class="p">(</span><span class="n">_</span> <span class="nv">fileURL</span><span class="p">:</span> <span class="kt">URL</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">URL</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">fileURL</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="nf">hasPrefix</span><span class="p">(</span><span class="n">kSourceRoot</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">fileURL</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="kt">URL</span><span class="p">(</span><span class="nv">fileURLWithPath</span><span class="p">:</span> <span class="s">"</span><span class="se">\(</span><span class="n">kSourceRoot</span><span class="se">)</span><span class="s">/</span><span class="se">\(</span><span class="n">fileURL</span><span class="o">.</span><span class="n">relativePath</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">private</span> <span class="kd">extension</span> <span class="kt">XCTSourceCodeLocation</span> <span class="p">{</span>
    <span class="kd">@objc</span>
    <span class="kd">convenience</span> <span class="nf">init</span><span class="p">(</span><span class="n">initWithRelativeFileURL</span> <span class="nv">relativeURL</span><span class="p">:</span> <span class="kt">URL</span><span class="p">,</span> <span class="nv">lineNumber</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// NOTE: This call is not recursive because of swizzling</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">initWithRelativeFileURL</span><span class="p">:</span> <span class="nf">remapFileURL</span><span class="p">(</span><span class="n">relativeURL</span><span class="p">),</span> <span class="nv">lineNumber</span><span class="p">:</span> <span class="n">lineNumber</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">swizzleXCTSourceCodeLocationIfNeeded</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// NOTE: Make sure our "Expand Variables Based On" is set correctly</span>
    <span class="k">if</span> <span class="n">kSourceRoot</span> <span class="o">==</span> <span class="s">"$(SRCROOT)"</span> <span class="p">{</span>
        <span class="nf">fatalError</span><span class="p">(</span><span class="s">"Got unsubstituted SRCROOT"</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">let</span> <span class="nv">originalSelector</span> <span class="o">=</span> <span class="kd">#selector(</span><span class="nf">XCTSourceCodeLocation.init(fileURL:lineNumber:)</span><span class="kd">)</span>
    <span class="k">let</span> <span class="nv">swizzledSelector</span> <span class="o">=</span> <span class="kd">#selector(</span><span class="nf">XCTSourceCodeLocation.init(initWithRelativeFileURL:lineNumber:)</span><span class="kd">)</span>

    <span class="k">guard</span> <span class="k">let</span> <span class="nv">originalMethod</span> <span class="o">=</span> <span class="nf">class_getInstanceMethod</span><span class="p">(</span><span class="kt">XCTSourceCodeLocation</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="n">originalSelector</span><span class="p">),</span>
        <span class="k">let</span> <span class="nv">swizzledMethod</span> <span class="o">=</span> <span class="nf">class_getInstanceMethod</span><span class="p">(</span><span class="kt">XCTSourceCodeLocation</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="n">swizzledSelector</span><span class="p">)</span> <span class="k">else</span>
    <span class="p">{</span>
        <span class="nf">fatalError</span><span class="p">(</span><span class="s">"Failed to swizzle XCTSourceCodeLocation"</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="nf">method_exchangeImplementations</span><span class="p">(</span><span class="n">originalMethod</span><span class="p">,</span> <span class="n">swizzledMethod</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>With this implementation, you need to call
<code class="highlighter-rouge">swizzleXCTSourceCodeLocationIfNeeded()</code> somewhere. Using the
<a href="https://developer.apple.com/documentation/bundleresources/information_property_list/nsprincipalclass"><code class="highlighter-rouge">NSPrincipalClass</code> plist
key</a>,
we can define a class that is initialized as soon as your test bundle
starts to run. We can define a small class to call this:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">ObjectiveC</span>

<span class="kd">final</span> <span class="kd">class</span> <span class="kt">UnitTestMain</span><span class="p">:</span> <span class="kt">NSObject</span> <span class="p">{</span>
    <span class="k">override</span> <span class="nf">init</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">()</span>

        <span class="nf">swizzleXCTSourceCodeLocationIfNeeded</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Disclaimer: this relies on a lot of implementation details in Xcode
which might break in the future. You should avoid this if possible.</p>
]]>
      </content>
    </entry>
  
    <entry>
      <title type="html"><![CDATA[Editing rpaths for _InternalSwiftSyntaxParser]]></title>
      <link rel="alternate" type="text/html" href="http://smileykeith.com/2021/03/03/editing-rpaths/" />
      <id>http://smileykeith.com/2021/03/03/editing-rpaths</id>
      <updated>2021-03-03T19:48:00-08:00</updated>
      <author>
        
          <name><![CDATA[Keith Smiley]]></name>
        
      </author>
      <content type="html">
        <![CDATA[<p>One of the issues with shipping a tool that depends on
<a href="https://github.com/apple/swift-syntax">SwiftSyntax</a> is that it depends
on a dynamic library that is provided with Xcode called
<code class="highlighter-rouge">_InternalSwiftSyntaxParser</code>. This library provides some of Swift's
logic for how to parse Swift code. When you run a command line tool that
was built with a different version of Xcode than what you have installed
locally, you hit this issue:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;unknown&gt;:0:0: error: The loaded '_InternalSwiftSyntaxParser' library is from a toolchain that is not compatible with this version of SwiftSyntax
</code></pre></div></div>

<p>Ideally, this library would be statically linked to your executable (and
I'm hoping we can find <a href="https://github.com/apple/swift/pull/36151">a
solution</a> to this) so you
would no longer have to worry about this. In the meantime, we can work
around this issue by shipping the version of the library from Xcode
alongside your executable, and loading that instead. This will increase
your distribution archive's size, but make it easier to support multiple
versions of Xcode at once.</p>

<p>The key to this workaround relies on how
<a href="https://keith.github.io/xcode-man-pages/dyld.1.html"><code class="highlighter-rouge">dyld</code></a> works.
<code class="highlighter-rouge">dyld</code> is responsible for loading the dynamic libraries your binary
depends on. First, it's useful for you to see what libraries you depend
on with
<a href="https://keith.github.io/xcode-man-pages/llvm-otool.1.html"><code class="highlighter-rouge">otool</code></a>.
For example:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>% otool -L ./.build/debug/drstring-cli
./.build/debug/drstring-cli:
  ...
  /usr/lib/swift/libswiftObjectiveC.dylib (compatibility version 1.0.0, current version 1.0.0, weak)
  /usr/lib/swift/libswiftXPC.dylib (compatibility version 1.0.0, current version 1.1.0, weak)
  @rpath/lib_InternalSwiftSyntaxParser.dylib (compatibility version 1.0.0, current version 17013.0.0)
</code></pre></div></div>

<p>Here you can see many libraries are directly referenced with their
absolute paths while <code class="highlighter-rouge">lib_InternalSwiftSyntaxParser.dylib</code>, the library
we're specifically interested in, is referenced via a
<a href="https://en.wikipedia.org/wiki/Rpath"><code class="highlighter-rouge">rpath</code></a>. You can run this command
to see your binary's <code class="highlighter-rouge">rpaths</code> (yours may differ depending on your
absolute path to Xcode):</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>% otool -l ./.build/debug/drstring-cli \
  | grep -A2 LC_RPATH \
  | grep "^\s*path" | cut -d " " -f 11
@loader_path
/Applications/Xcode-12.4.0.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/macosx
</code></pre></div></div>

<p>Here we can see that <code class="highlighter-rouge">dyld</code> is instructed to look in 2 directories to
find <code class="highlighter-rouge">lib_InternalSwiftSyntaxParser.dylib</code>. First, it looks in the
directory specified by <code class="highlighter-rouge">@loader_path</code>, which in our case is likely
irrelevant since it is the directory that contains our executable. Then,
it looks inside a directory within my absolute path to Xcode (which
isn't very portable), which we can see this includes the library we
expect (you'll have to change this path to your local Xcode path):</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>% ls /Applications/Xcode-12.4.0.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/macosx
layouts-x86_64.yaml                  libswiftCompatibilityDynamicReplacements.a
lib_InternalSwiftSyntaxParser.dylib  libswiftRemoteMirror42.dylib
libswiftCompatibility50.a            libswiftRemoteMirrorLegacy.dylib
libswiftCompatibility51.a            prebuilt-modules
</code></pre></div></div>

<p>Given this information, our goal is to replace the default locations
<code class="highlighter-rouge">dyld</code> searches, and replace those with the directory we want. There are
a few ways we can do this, but first we need to decide what directory we
will ship the library in. Typically, the directory structure for a
command line tool that includes a dynamic library looks something
like this:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;prefix&gt;
├── bin
│   └── drstring-cli
└── lib
    └── lib_InternalSwiftSyntaxParser.dylib
</code></pre></div></div>

<p>We can use this for our example. First, we need to copy the library
from Xcode using (this might change with future Xcode releases):</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cp "$(xcode-select -p)"/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/macosx/lib_InternalSwiftSyntaxParser.dylib .
</code></pre></div></div>

<p>Then, using
<a href="https://keith.github.io/xcode-man-pages/install_name_tool.1.html"><code class="highlighter-rouge">install_name_tool</code></a>,
we can edit the <code class="highlighter-rouge">rpaths</code> in our binary. In this case, since we only have
2 <code class="highlighter-rouge">rpaths</code>, and neither of them are what we want, lets delete them both
(you'll have to change the Xcode path for your local installation):</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>% install_name_tool \
  -delete_rpath @loader_path \
  -delete_rpath /Applications/Xcode-12.4.0.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/macosx \
  bin/drstring-cli
</code></pre></div></div>

<p>Now, when we run our binary, we see it crashes immediately because it
cannot find  the libraries it needs:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>% bin/drstring-cli
dyld: Library not loaded: @rpath/lib_InternalSwiftSyntaxParser.dylib
  Referenced from: /Users/ksmiley/dev/DrString/bin/drstring-cli
  Reason: image not found
</code></pre></div></div>

<p>At this point we have 2 options. We can either launch our binary with
some special environment variables that <code class="highlighter-rouge">dyld</code> reads, or encode the
<code class="highlighter-rouge">rpath</code> we want into the binary. Since adding the <code class="highlighter-rouge">rpath</code> to the binary
is destructive, lets try the environment variable approach first as an
example. Using <code class="highlighter-rouge">DYLD_LIBRARY_PATH</code> we can instruct <code class="highlighter-rouge">dyld</code> to discover
the libraries we want:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>% DYLD_LIBRARY_PATH=lib bin/drstring-cli
OVERVIEW: A Swift docstring linter, formatter, nitpicky assistant...
...
</code></pre></div></div>

<p>There is also <code class="highlighter-rouge">DYLD_FALLBACK_LIBRARY_PATH</code>, which unlike
<code class="highlighter-rouge">DYLD_LIBRARY_PATH</code>, has a default of <code class="highlighter-rouge">/usr/local/lib:/usr/lib</code>. This
means if your library doesn't exist in the binary's <code class="highlighter-rouge">rpaths</code>, but then
happens to be in <code class="highlighter-rouge">/usr/local/lib</code>, it will still run as expected. This
is useful to know, because <a href="https://brew.sh/">homebrew</a> installs
libraries to <code class="highlighter-rouge">/usr/local/lib</code> on Intel based Macs. This can be
surprising if you install an unrelated tool that depends on the same
library and then your binary discovers this unrelated installation when
you don't want it to. If you want to disable this fallback, you can set
the value to <code class="highlighter-rouge">/dev/null</code>. In our example, using
<code class="highlighter-rouge">DYLD_FALLBACK_LIBRARY_PATH</code> results in same behavior:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>% DYLD_FALLBACK_LIBRARY_PATH=lib bin/drstring-cli
OVERVIEW: A Swift docstring linter, formatter, nitpicky assistant...
...
</code></pre></div></div>

<p>Instead of setting environment variables every time we run the binary,
we can edit our binary to instruct <code class="highlighter-rouge">dyld</code> to search the correct
directory. Again, we use <code class="highlighter-rouge">install_name_tool</code> for this:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>% install_name_tool -add_rpath @executable_path/../lib bin/drstring-cli
</code></pre></div></div>

<p>In this case we rely on a relative path, based on the executable's
current path, to find our library. Now, as long as we ship the library
alongside our binary, we can run it without setting any environment
variables.</p>

<p>To check that this worked as expected you can launch your executable
with <code class="highlighter-rouge">DYLD_PRINT_LIBRARIES</code> set and <code class="highlighter-rouge">grep</code> for the library:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>% DYLD_PRINT_LIBRARIES=yesplz bin/drstring-cli 2&gt;&amp;1 | grep _Internal
dyld: loaded: &lt;A1954DF6-6F32-3A7C-A50E-0B7942D95F99&gt; /Users/ksmiley/dev/DrString/bin/../lib/lib_InternalSwiftSyntaxParser.dylib
</code></pre></div></div>

<p>To use this method with Swift Package Manager you'll have to run a
post-processing script that alters your <code class="highlighter-rouge">rpaths</code> using what we've
learned.</p>

<p>Overall this is more work than if we could produce a statically linked
binary, but it's better than having to force your users on to a specific
version of Xcode.</p>
]]>
      </content>
    </entry>
  
    <entry>
      <title type="html"><![CDATA[Cross compiling for Apple Silicon with Swift Package Manager]]></title>
      <link rel="alternate" type="text/html" href="http://smileykeith.com/2020/12/24/swiftpm-cross-compile/" />
      <id>http://smileykeith.com/2020/12/24/swiftpm-cross-compile</id>
      <updated>2020-12-24T14:32:00-08:00</updated>
      <author>
        
          <name><![CDATA[Keith Smiley]]></name>
        
      </author>
      <content type="html">
        <![CDATA[<p>If you distribute binaries for command line tools built with <a href="https://swift.org/package-manager">Swift
Package Manager</a>, you might have
previously built your distribution binary with:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>% swift build <span class="nt">--configuration</span> release
</code></pre></div></div>

<p>If you inspect the binary, you can see it was built for the current
machine's architecture by default:</p>

<pre><code class="language-none">% file .build/release/package
.build/release/package: Mach-O 64-bit executable x86_64
</code></pre>

<p>Previously, this was sufficient since macOS only supported one
architecture. Now, in order to fully utilize the native performance of
Apple Silicon chips, we need to produce a <a href="https://en.wikipedia.org/wiki/Fat_binary">fat
binary</a> that contains a slice
for both <code class="highlighter-rouge">x86_64</code> and <code class="highlighter-rouge">arm64</code>.</p>

<p>Swift Package Manager has a few different ways to achieve this. The
easiest way, as far as I can tell, is to pass the hidden <code class="highlighter-rouge">--arch</code> flag
once for each architecture:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>% swift build <span class="nt">--configuration</span> release <span class="nt">--arch</span> arm64 <span class="nt">--arch</span> x86_64
</code></pre></div></div>

<p>This goes through a <a href="https://github.com/apple/swift-package-manager/blob/ec407ac14738bf132b23441aa9435a919124eda6/Sources/XCBuildSupport/XcodeBuildSystem.swift">different code
path</a>
in Swift Package Manager, and utilizes Xcode's underlying XCBuild tool.
This results in the built binary being in a different path than usual.
Inspecting the new artifact, we can see we have a binary containing both
requested architectures:</p>

<pre><code class="language-none">% file .build/apple/Products/Release/package
.build/apple/Products/Release/package: Mach-O universal binary with 2 architectures: [x86_64:Mach-O 64-bit executable x86_64] [arm64:Mach-O 64-bit executable arm64]
.build/apple/Products/Release/package (for architecture x86_64):        Mach-O 64-bit executable x86_64
.build/apple/Products/Release/package (for architecture arm64): Mach-O 64-bit executable arm64
</code></pre>

<p>Another option is to build once for each architecture, and then combine
the binaries using
<a href="https://keith.github.io/xcode-man-pages/lipo.1.html"><code class="highlighter-rouge">lipo</code></a>. Unlike
the <code class="highlighter-rouge">--arch</code> option, this approach also works on Linux. Here's an
example:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>% swift build <span class="nt">--configuration</span> release <span class="nt">--triple</span> arm64-apple-macosx
% swift build <span class="nt">--configuration</span> release <span class="nt">--triple</span> x86_64-apple-macosx
% lipo <span class="nt">-create</span> <span class="nt">-output</span> package .build/arm64-apple-macosx/release/package .build/x86_64-apple-macosx/release/package
</code></pre></div></div>

<p>Inspecting our final binary we can see it correctly has both
architectures:</p>

<pre><code class="language-none">% file package
package: Mach-O universal binary with 2 architectures: [x86_64:Mach-O 64-bit executable x86_64] [arm64:Mach-O 64-bit executable arm64]
package (for architecture x86_64):      Mach-O 64-bit executable x86_64
package (for architecture arm64):       Mach-O 64-bit executable arm64
</code></pre>
]]>
      </content>
    </entry>
  
    <entry>
      <title type="html"><![CDATA[LLDB Reproducers]]></title>
      <link rel="alternate" type="text/html" href="http://smileykeith.com/2020/09/29/lldb-reproducers/" />
      <id>http://smileykeith.com/2020/09/29/lldb-reproducers</id>
      <updated>2020-09-29T19:39:00-07:00</updated>
      <author>
        
          <name><![CDATA[Keith Smiley]]></name>
        
      </author>
      <content type="html">
        <![CDATA[<p>Swift developers love to complain about LLDB. While there are many
reasonable complaints, the important question is what can we do to make
it better.</p>

<p>Enter <a href="https://lldb.llvm.org/resources/reproducers.html">reproducers</a>. Reproducers provide a way to run LLDB
while also capturing information about your debugging session. With this
information you can <a href="https://feedbackassistant.apple.com">submit</a> a more useful bug report to Apple
with a reliable reproduction case.</p>

<h1 id="how">How?</h1>

<p>Although the steps to use reproducers are mostly straightforward,
launching LLDB from Xcode does not enable <code class="highlighter-rouge">--capture</code> mode (FB7878562).
This means if you want to provide a reproducer for an issue you've
experienced in a Xcode debugging session, you need to reproduce it
outside of Xcode instead.</p>

<p><strong>Update</strong>: the folks from PSPDFKit <a href="https://pspdfkit.com/blog/2020/an-introduction-to-lldb-reproducers">pointed
out</a> as
of Xcode 12 there is a private default for enabling capture mode for
debugging sessions launched from Xcode:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>defaults write com.apple.dt.Xcode IDEDebuggerEnableReproducerCapture -bool YES
</code></pre></div></div>

<p>Note: to provide enough information to reproduce your issue, LLDB
bundles all files the debugging session touched. This includes binaries
with debug info that you may consider sensitive. As <a href="https://twitter.com/johannesweiss/status/1311350073767362565">pointed out on
Twitter</a>
this will also contain anything in memory at the time of capture. Be
sure to verify what you're sharing with Apple before you <a href="https://feedbackassistant.apple.com">send
it</a>.</p>

<h2 id="cli--macos-app">CLI / macOS app</h2>

<p>If you're debugging a program on your Mac, there are a few steps:</p>

<ol>
  <li>Run the app in Xcode and stop it. This way you know the binary is up
to date.</li>
  <li>In Terminal.app navigate to your DerivedData directory (you can find
this by right clicking on your app in the "Products" section of
Xcode's project navigator, and clicking "Show in Finder").</li>
  <li>Run <code class="highlighter-rouge">lldb --capture /path/to/Your.app</code>.</li>
  <li>In the LLDB session run <code class="highlighter-rouge">process launch --stop-at-entry</code>.</li>
  <li>Now you're in a paused LLDB session. Here you can <a href="https://lldb.llvm.org/use/tutorial.html#setting-breakpoints">set the
breakpoints</a> you need to reproduce your issue. Often for
me this means breaking at a specific place, and running some version
of <code class="highlighter-rouge">po foo</code> that causes an issue.</li>
  <li>Once you're done reproducing the issue, run <code class="highlighter-rouge">reproducer generate</code> in
LLDB. This will print the path the information was written to.</li>
  <li>Verify the contents of the output directory doesn't include anything
you're not comfortable sharing with Apple, zip it, and <a href="https://feedbackassistant.apple.com">submit a
radar</a>!</li>
</ol>

<h2 id="ios-app-on-the-simulator">iOS app on the simulator</h2>

<p>Running apps directly from LLDB on the iOS simulator does <a href="https://forums.swift.org/t/using-lldb-with-ios-simulator-from-cli/33990/6">not
work</a>
the same way as running a macOS app. Because of this, the steps differ.</p>

<ol>
  <li>Run the app in Xcode and stop it. This way it's updated and installed
on the iOS simulator.</li>
  <li>Run <code class="highlighter-rouge">lldb --capture --wait-for --attach-name YOUR_APP_NAME</code>.</li>
  <li>Manually launch your app in the Simulator.</li>
  <li>Now you're in a paused LLDB session. Here you can <a href="https://lldb.llvm.org/use/tutorial.html#setting-breakpoints">set the
breakpoints</a> you need to reproduce your issue. Often for
me this means breaking at a specific place, and running some version
of <code class="highlighter-rouge">po foo</code> that causes an issue.</li>
  <li>Once you're done reproducing the issue, run <code class="highlighter-rouge">reproducer generate</code> in
LLDB. This will print the path the information was written to.</li>
  <li>Verify the contents of the output directory doesn't include anything
you're not comfortable sharing with Apple, zip it, and <a href="https://feedbackassistant.apple.com">submit a
radar</a>!</li>
</ol>

<h2 id="ios-app-on-device">iOS app on device</h2>

<p>Unfortunately, I haven't yet figured out the right incantation to launch
LLDB directly and attach to an on-device process. If anyone has a good
workflow for this please <a href="https://twitter.com/SmileyKeith">let me know</a>.</p>

<h1 id="tips">Tips</h1>

<ul>
  <li>Checkout the <a href="https://lldb.llvm.org/resources/reproducers.html">reproducers</a> page for more details.</li>
  <li><code class="highlighter-rouge">man lldb</code> has more usage info.</li>
  <li>Passing <code class="highlighter-rouge">--capture-path</code> to LLDB might be helpful.</li>
  <li>Run <code class="highlighter-rouge">reproducer status</code> to verify you're in capture mode.</li>
  <li>Run <code class="highlighter-rouge">help COMMAND [SUBCOMMAND]</code> in LLDB to get info on the commands
you're running.</li>
  <li>Run <code class="highlighter-rouge">help b</code> to see examples of how to set breakpoints from the
command line interface.</li>
  <li>See the <a href="https://lldb.llvm.org/use/tutorial.html#setting-breakpoints">LLDB tutorial</a> for more breakpoint examples.</li>
  <li>Try out <code class="highlighter-rouge">lldb --replay /path/to/your/reproducer</code> to see what Apple
will see.</li>
  <li>You can attach to XCTest processes by using <code class="highlighter-rouge">xctest</code> as your
<code class="highlighter-rouge">--attach-name</code> argument.</li>
</ul>

]]>
      </content>
    </entry>
  
    <entry>
      <title type="html"><![CDATA[NSProgress with Asynchronous Tasks]]></title>
      <link rel="alternate" type="text/html" href="http://smileykeith.com/2015/03/14/nsprogress-with-asynchronous-tasks/" />
      <id>http://smileykeith.com/2015/03/14/nsprogress-with-asynchronous-tasks</id>
      <updated>2015-03-14T18:57:00-07:00</updated>
      <author>
        
          <name><![CDATA[Keith Smiley]]></name>
        
      </author>
      <content type="html">
        <![CDATA[<p>After having a use for <code class="highlighter-rouge">NSProgress</code> I finally got a chance to dive in to
its API. I found it to be less than understandable. So I wrote about it
on the thoughtbot blog. You can find my post, <a href="https://robots.thoughtbot.com/asynchronous-nsprogress">NSProgress with
Asynchronous Tasks,
here</a>.</p>
]]>
      </content>
    </entry>
  
    <entry>
      <title type="html"><![CDATA[ReactiveCocoa and Core Data]]></title>
      <link rel="alternate" type="text/html" href="http://smileykeith.com/2015/03/14/reactive-cocoa-and-core-data/" />
      <id>http://smileykeith.com/2015/03/14/reactive-cocoa-and-core-data</id>
      <updated>2015-03-14T18:53:00-07:00</updated>
      <author>
        
          <name><![CDATA[Keith Smiley]]></name>
        
      </author>
      <content type="html">
        <![CDATA[<p>After finally starting to use
<a href="https://github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa</a> I found
integrating with Core Data to be a sore spot. I wrote about improving this
integration on the thoughtbot blog
<a href="https://robots.thoughtbot.com/reactive-core-data">here</a>.</p>
]]>
      </content>
    </entry>
  
    <entry>
      <title type="html"><![CDATA[Writing Vim Syntax Plugins]]></title>
      <link rel="alternate" type="text/html" href="http://smileykeith.com/2015/03/14/writing-vim-syntax-plugins/" />
      <id>http://smileykeith.com/2015/03/14/writing-vim-syntax-plugins</id>
      <updated>2015-03-14T18:48:00-07:00</updated>
      <author>
        
          <name><![CDATA[Keith Smiley]]></name>
        
      </author>
      <content type="html">
        <![CDATA[<p>After <a href="http://www.smileykeith.com/2015/03/14/clojure/">writing about
Clojure</a> I wrote about
writing Vim syntax plugins. Check it out
<a href="https://robots.thoughtbot.com/writing-vim-syntax-plugins">here</a>.</p>
]]>
      </content>
    </entry>
  
    <entry>
      <title type="html"><![CDATA[Clojure]]></title>
      <link rel="alternate" type="text/html" href="http://smileykeith.com/2015/03/14/clojure/" />
      <id>http://smileykeith.com/2015/03/14/clojure</id>
      <updated>2015-03-14T18:27:00-07:00</updated>
      <author>
        
          <name><![CDATA[Keith Smiley]]></name>
        
      </author>
      <content type="html">
        <![CDATA[<p>I haven't had anything to write in a while. Mainly because, as I've been
working at <a href="https://thoughtbot.com">thoughtbot</a>, I've been writing
everything I can on <a href="https://robots.thoughtbot.com">the thoughtbot
blog</a>. I spent a little while writing
<a href="http://clojure.org">Clojure</a>, and out of that came a few posts.</p>

<p>Overall I wasn't a big fan of Clojure. I definitely lean more towards
functional languages <a href="https://www.haskell.org">with types</a> but I wanted
to link these articles here regardless.</p>

<ul>
  <li><a href="https://robots.thoughtbot.com/getting-started-with-liberator">Getting Started with Liberator</a></li>
  <li><a href="https://robots.thoughtbot.com/using-yesql-in-clojure">Using Yesql in Clojure</a></li>
  <li><a href="https://robots.thoughtbot.com/writing-clojure-in-vim">Writing Clojure in Vim</a></li>
</ul>
]]>
      </content>
    </entry>
  
    <entry>
      <title type="html"><![CDATA[Vim TagBar with Objective-C]]></title>
      <link rel="alternate" type="text/html" href="http://smileykeith.com/2014/02/14/vim-tagbar-with-objective-c/" />
      <id>http://smileykeith.com/2014/02/14/vim-tagbar-with-objective-c</id>
      <updated>2014-02-14T13:53:00-08:00</updated>
      <author>
        
          <name><![CDATA[Keith Smiley]]></name>
        
      </author>
      <content type="html">
        <![CDATA[<p>When working with large files in Vim,
<a href="http://majutsushi.github.io/tagbar/">Tagbar</a> has become an invaluable
part of my workflow. It provides a succinct list of methods, modules,
variables and other language specific constructs. When I started trying
to spend more time in Vim writing Objective-C I was disappointed to see
that, out of the box, it was not supported.</p>

<p>Hopefully in the future it won't be difficult to set this up in Vim.
Currently ctags <a href="https://svn.code.sf.net/p/ctags/code/trunk/objc.c">already
has</a> built in support
for Objective-C. Unfortunately there hasn't been a release of ctags
since 2009. As recommended in the <a href="http://bastibe.de/2011-12-04-how-to-make-tagbar-work-with-objective-c.html">canonical how to
article</a>
you can attempt to use the trunk version of ctags and just define the
Tagbar settings. For me, this ended up producing a ton of
mis-categorized duplicates. I also opened and closed <a href="https://github.com/majutsushi/tagbar/issues/193">an
issue</a> on the Tagbar
Github repo hoping that Objective-C support will be added by default in
the future.</p>

<p>The only other resource I could find about this issue was <a href="https://gist.github.com/yamaya/5598909">this
gist</a>. It uses regex to define
Objective-C to ctags and then match it with Tagbar. I improved it a
little bit and came up with this. Put this file anywhere you want, you
will define its path in your vimrc.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>--langdef=objc
--langmap=objc:.m..mm..h
--regex-objc=/\@interface[[:space:]]+([[:alnum:]_]+)/\1/i,interface/
--regex-objc=/\@implementation[[:space:]]+([[:alnum:]_]+)/\1/I,implementation/
--regex-objc=/\@protocol[[:space:]]+([[:alnum:]_]+)/\1/P,protocol/
--regex-objc=/\@property[[:space:]]+\([[:alnum:],[:space:]]+\)[[:space:]]+[[:alnum:]_]+[[:space:]]+\*?([[:alnum:]_]+)/\1/p,property/
--regex-objc=/([-+])[[:space:]]*\([[:alpha:]_][^)]*\)[[:space:]]*([[:alpha:]_][^:;{]+).*/\1\2/M,method definition/
--regex-objc=/^[^#@[:space:]][^=]*[[:space:]]([[:alpha:]_][[:alnum:]_]*)[[:space:]]*=/\1/c,constant/
--regex-objc=/^[[:space:]]*typedef[[:space:]][^;]+[[:space:]]([[:alpha:]_][[:alnum:]]*)[[:space:]]*;/\1/t,typedef/
--regex-objc=/^[[:space:]]*NS_ENUM\([[:alnum:]]+[[:space:]]*,[[:space:]]([[:alnum:]]+)\)/\1/e,enum/
--regex-objc=/^#pragma[[:space:]]+mark[[:space:]]+-?[[:space:]]+([[:alnum:][:space:]]+)/\1/g,pragma/
</code></pre></div></div>

<p>Then in your vimrc:</p>

<div class="language-vim highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">g:tagbar_type_objc</span> <span class="p">=</span> <span class="p">{</span>
<span class="se">  \</span> <span class="s1">'ctagstype'</span><span class="p">:</span> <span class="s1">'objc'</span><span class="p">,</span>
<span class="se">  \</span> <span class="s1">'ctagsargs'</span><span class="p">:</span> <span class="p">[</span>
<span class="se">    \</span> <span class="s1">'-f'</span><span class="p">,</span>
<span class="se">    \</span> <span class="s1">'-'</span><span class="p">,</span>
<span class="se">    \</span> <span class="s1">'--excmd=pattern'</span><span class="p">,</span>
<span class="se">    \</span> <span class="s1">'--extra='</span><span class="p">,</span>
<span class="se">    \</span> <span class="s1">'--format=2'</span><span class="p">,</span>
<span class="se">    \</span> <span class="s1">'--fields=nksaSmt'</span><span class="p">,</span>
<span class="se">    \</span> <span class="s1">'--options='</span> <span class="p">.</span> expand<span class="p">(</span><span class="s1">'~/.vim/objctags'</span><span class="p">),</span>
<span class="se">    \</span> <span class="s1">'--objc-kinds=-N'</span><span class="p">,</span>
<span class="se">  \</span> <span class="p">],</span>
<span class="se">  \</span> <span class="s1">'sro'</span><span class="p">:</span> <span class="s1">' '</span><span class="p">,</span>
<span class="se">  \</span> <span class="s1">'kinds'</span><span class="p">:</span> <span class="p">[</span>
<span class="se">    \</span> <span class="s1">'c:constant'</span><span class="p">,</span>
<span class="se">    \</span> <span class="s1">'e:enum'</span><span class="p">,</span>
<span class="se">    \</span> <span class="s1">'t:typedef'</span><span class="p">,</span>
<span class="se">    \</span> <span class="s1">'i:interface'</span><span class="p">,</span>
<span class="se">    \</span> <span class="s1">'P:protocol'</span><span class="p">,</span>
<span class="se">    \</span> <span class="s1">'p:property'</span><span class="p">,</span>
<span class="se">    \</span> <span class="s1">'I:implementation'</span><span class="p">,</span>
<span class="se">    \</span> <span class="s1">'M:method'</span><span class="p">,</span>
<span class="se">    \</span> <span class="s1">'g:pragma'</span><span class="p">,</span>
<span class="se">  \</span> <span class="p">],</span>
<span class="se">\</span> <span class="p">}</span>
</code></pre></div></div>

<p>Replace the <code class="highlighter-rouge">~/.vim/objctags</code> with the path where you chose to put the
first file. Please let me know if you see any way that this could be
improved.</p>
]]>
      </content>
    </entry>
  
    <entry>
      <title type="html"><![CDATA[IPSEC/L2TP VPN on a Raspberry Pi running Arch Linux]]></title>
      <link rel="alternate" type="text/html" href="http://smileykeith.com/2014/01/27/ipsec-l2tp-vpn-on-a-raspberry-pi-running-arch-linux/" />
      <id>http://smileykeith.com/2014/01/27/ipsec-l2tp-vpn-on-a-raspberry-pi-running-arch-linux</id>
      <updated>2014-01-27T20:49:00-08:00</updated>
      <author>
        
          <name><![CDATA[Keith Smiley]]></name>
        
      </author>
      <content type="html">
        <![CDATA[<p>After you buy a Raspberry Pi, or two, you need to figure out what to use them
for. While you'll get a ton of <em>interesting</em> ideas from Googling "uses for a
Raspberry Pi," I didn't particularly find them any more than a <a href="http://arstechnica.com/information-technology/2012/12/10-raspberry-pi-creations-that-show-how-amazing-the-tiny-pc-can-be/">thought
exercise</a>.
Making a VPN stood out as an actually useful configuration.</p>

<p>Originally when I got my (accidentally chosen) Model A, I spent a little
while going through <a href="http://willitscript.com/post/40357408648/using-your-pi-as-a-l2tp-vpn-server">this
guide</a>
using Raspbian. That seemed to work fine until I recently purchased a
Model B to replace it and couldn't reproduce the configuration. I
decided to write the steps that I was finally able to use to get a
functional VPN running on Arch Linux.</p>

<p>I started out by following <a href="https://raymii.org/s/tutorials/IPSEC_L2TP_vpn_on_a_Raspberry_Pi_with_Arch_Linux.html">this
guide</a>
hoping that it would get me a functioning VPN without too much work.  Most of
this setup will be based on that article with some tweaks for what I had to do
to make the settings stick.  Unfortunately while it worked after the setup the
configuration did not persist after restart.  For this configuration, like I
said earlier, I wanted to use the ARM version of Arch Linux rather than
Raspbian for the install. You can download the Raspberry Pi compatible Arch
image from their <a href="http://www.raspberrypi.org/downloads">downloads page</a>. I'm
not sure I would recommend Arch for people who haven't installed it before or
at least gotten through their <a href="https://wiki.archlinux.org/index.php/Beginners'_Guide">Beginners'
Guide</a>. The ARM Image,
like the normal image, doesn't come with a GUI, perfect for this use of the Pi.</p>

<p>I'm not going to bother with making sure this works before restarting, since
that doesn't seem like much of an issue with actual usage (although you can
just run the scripts we create and it should work fine). I wouldn't recommend
doing much configuration before doing this intial setup. I did this the first
time and after an hour of configuration my VPN did not work correctly, I ended
up nuking the work I had done and starting over.</p>

<p>Start by installing the necessary components:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pacman -Sy openswan xl2tpd ppp lsof python2
</code></pre></div></div>

<p>You need to do some configuration of the firewall and redirects:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">echo</span> <span class="s2">"net.ipv4.ip_forward = 1"</span> |  <span class="nb">tee</span> <span class="nt">-a</span> /etc/sysctl.conf
<span class="nb">echo</span> <span class="s2">"net.ipv4.conf.all.accept_redirects = 0"</span> |  <span class="nb">tee</span> <span class="nt">-a</span> /etc/sysctl.conf
<span class="nb">echo</span> <span class="s2">"net.ipv4.conf.all.send_redirects = 0"</span> |  <span class="nb">tee</span> <span class="nt">-a</span> /etc/sysctl.conf
<span class="nb">echo</span> <span class="s2">"net.ipv4.conf.default.rp_filter = 0"</span> |  <span class="nb">tee</span> <span class="nt">-a</span> /etc/sysctl.conf
<span class="nb">echo</span> <span class="s2">"net.ipv4.conf.default.accept_source_route = 0"</span> |  <span class="nb">tee</span> <span class="nt">-a</span> /etc/sysctl.conf
<span class="nb">echo</span> <span class="s2">"net.ipv4.conf.default.send_redirects = 0"</span> |  <span class="nb">tee</span> <span class="nt">-a</span> /etc/sysctl.conf
<span class="nb">echo</span> <span class="s2">"net.ipv4.icmp_ignore_bogus_error_responses = 1"</span> |  <span class="nb">tee</span> <span class="nt">-a</span> /etc/sysctl.conf</code></pre></figure>

<p>To make these settings persist we need to create a script that gets launched by
systemd each time we restart the system. As recommended in the original
article, and being a <a href="http://brew.sh/">Homebrew</a> user I created the script in
<code class="highlighter-rouge">/usr/local/bin/vpn-boot.sh</code>:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#!/usr/bin/bash</span>

iptables <span class="nt">--table</span> nat <span class="nt">--append</span> POSTROUTING <span class="nt">--jump</span> MASQUERADE

<span class="k">for </span>vpn <span class="k">in</span> /proc/sys/net/ipv4/conf/<span class="k">*</span><span class="p">;</span> <span class="k">do
    </span><span class="nb">echo </span>0 <span class="o">&gt;</span> <span class="nv">$vpn</span>/accept_redirects<span class="p">;</span>
    <span class="nb">echo </span>0 <span class="o">&gt;</span> <span class="nv">$vpn</span>/send_redirects<span class="p">;</span>
<span class="k">done

</span>sysctl <span class="nt">-p</span></code></pre></figure>

<p>There are a few things that differ here to the original article. First
the hashbang path was changed since the default $PATH on the ARM version
of Arch didn't include <code class="highlighter-rouge">/bin</code>. I would run <code class="highlighter-rouge">which -a bash</code> on your
install to make sure this works for you. This obviously doesn't have
to be changed, but I think it's better in the long run. I also added
<code class="highlighter-rouge">sysctl -p</code> since these settings didn't seemed to be applied otherwise.
Then you must make this script executable with something like:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">chmod</span> +x /usr/local/bin/vpn-boot.sh</code></pre></figure>

<p>Since Arch uses systemd to this script has to be launched by creating a
service to be ran through systemd. You can create this file in
<code class="highlighter-rouge">/etc/systemd/system/vpnboot.service</code></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[Unit]
Description=VPN Settings at boot
After=netctl@eth0.service
Before=openswan.service xl2tpd.service

[Service]
ExecStart=/usr/local/bin/vpn-boot.sh

[Install]
WantedBy=multi-user.target
</code></pre></div></div>

<p>I added a few things here as well. I wanted to make sure that the boot command
would launch after the network settings had been established and before the
other VPN software was launched. I'm not sure how many of these changes would
be required for systemd to do what I wanted it to but the order really seemed
to matter for here. After you create this service enable it within systemd
with:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl enable vpnboot.service
</code></pre></div></div>

<p>I also made some changes to <code class="highlighter-rouge">/etc/ipsec.conf</code> (note the comments in the
default file for some more info on these settings):</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>config setup
  dumpdir=/var/run/pluto/
  nat_traversal=yes
  virtual_private=%v4:10.0.0.0/8,%v4:192.168.0.0/16,%v4:172.16.0.0/12,%v4:25.0.0.0/8,%v6:fd00::/8,%v6:fe80::/10
  oe=off
  protostack=netkey
  plutoopts="--interface=eth0"

conn L2TP-PSK-noNAT
  authby=secret
  pfs=no
  auto=add
  keyingtries=3
  ikelifetime=8h
  keylife=1h
  type=transport
  # Your server's IP (I used my internal IP, assuming you're using NAT)
  left=172.16.1.1
  leftprotoport=17/1701
  right=%any
  rightprotoport=17/%any
  rightsubnetwithin=0.0.0.0/0
  dpddelay=10
  dpdtimeout=20
  dpdaction=clear
</code></pre></div></div>

<p>Then for the <code class="highlighter-rouge">/etc/ipsec.secrets</code> (use the same server IP address):</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>%SameIP%  %any: PSK "super random key"
</code></pre></div></div>

<p>The make systemd start openswan on boot as well:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl enable openswan
</code></pre></div></div>

<p>I also edited the openswan service file in
<code class="highlighter-rouge">/etc/systemd/system/multi-user.target.wants/openswan.service</code></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[Unit]
Description=Openswan daemon
After=netctl@eth0.service vpnboot.service
Before=xl2tpd.service

[Service]
Type=forking
ExecStart=/usr/lib/systemd/scripts/ipsec --start
ExecStop=/usr/lib/systemd/scripts/ipsec --stop
ExecReload=/usr/lib/systemd/scripts/ipsec --restart
Restart=always

[Install]
WantedBy=multi-user.target
</code></pre></div></div>

<p>As you can see I removed the original network dependency and added a new
dependency of <a href="https://wiki.archlinux.org/index.php/Netctl">netctl's</a>
default network interface (we haven't enabled this yet).</p>

<p>Next for <code class="highlighter-rouge">/etc/xl2tpd/xl2tpd.conf</code>:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[global]
ipsec saref = yes
saref refinfo = 30

[lns default]
ip range = 172.16.1.70-172.16.1.89
local ip = 172.16.1.1
require authentication = yes
ppp debug = yes
pppoptfile = /etc/ppp/options.xl2tpd
length bit = yes
unix authentication = yes
</code></pre></div></div>

<p>Where <code class="highlighter-rouge">local ip</code> is the server's ip and the <code class="highlighter-rouge">ip range</code> is the range of
IP addresses you want to use for VPN clients. You need to enable this
service too with:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl enable xl2tpd
</code></pre></div></div>

<p>I also edited the systemd file for xl2tpd at
<code class="highlighter-rouge">/etc/systemd/system/multi-user.target.wants/xl2tpd.service</code>:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[Unit]
Description=Level 2 Tunnel Protocol Daemon (L2TP)
After=syslog.target netctl@eth0.service openswan.service
Requires=openswan.service

[Service]
Type=simple
PIDFile=/run/xl2tpd/xl2tpd.pid
ExecStart=/usr/bin/xl2tpd -D
Restart=on-abort

[Install]
WantedBy=multi-user.target
</code></pre></div></div>

<p>The other guide also recommends creating the xl2tpd control folder with:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkdir /var/run/xl2tpd/
</code></pre></div></div>

<p>Now we need to create/edit <code class="highlighter-rouge">/etc/ppp/options.xl2tpd</code>:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ipcp-accept-local
ipcp-accept-remote
ms-dns 8.8.8.8
ms-dns 8.8.4.4
auth
mtu 1200
mru 1000
crtscts
hide-password
modem
name l2tpd
proxyarp
lcp-echo-interval 30
lcp-echo-failure 4
login
</code></pre></div></div>

<p><code class="highlighter-rouge">/etc/pam.d/ppp</code>:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>auth    required        pam_nologin.so
auth    required        pam_unix.so
account required        pam_unix.so
session required        pam_unix.so
</code></pre></div></div>

<p>And <code class="highlighter-rouge">/etc/ppp/pap-secrets</code>:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>*       l2tpd           ""              *
</code></pre></div></div>

<p>If you'd like you can also restrict the users accounts that can access
the vpn. This way you can separate your login user from your VPN users
who can have much stronger passwords. You'd do that in your
<code class="highlighter-rouge">/etc/ppp/pap-secrets</code>:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vpnuser   l2tpd         ""              *
</code></pre></div></div>

<p>To enable the startup of the default netctl eth0 interface you need to
run:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>netctl enable eth0
</code></pre></div></div>

<p>You'll probably want to disable any other netctl systemd functions that are
enabled by default. Check <code class="highlighter-rouge">/etc/systemd/system/mutli-user.target.wants</code> to for
other <code class="highlighter-rouge">netctl</code> profiles.</p>

<p>So at this point you should be able to enable VPN clients using the
super secret keys you enabled before and the username and passwords
you've created previously. You can create new users for specifically VPN
usage with something like this:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>useradd -s /sbin/nologin vpnuser
</code></pre></div></div>

<p>This disallows users from being able to be used for login which is probably
more secure for your VPN (although not required). For testing you can use the
root/root defualt user and a less secure key, although you should <em>definitely</em>
change these before allowing access to the outside world.</p>

<h3 id="troubleshooting">Troubleshooting</h3>

<p>Undoubtedly you'll have to deal with something that doesn't work exactly
how my setup works. The most useful things to seeing what was happening
were these:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>netstat -tulpan
systemctl status openswan
systemctl status xl2tpd
journalctl -f
</code></pre></div></div>

<p>You can glance at some of the other guides to see what should be going
on. You probably shouldn't see any red in the <code class="highlighter-rouge">openswan</code> status and you
should see ports open under <code class="highlighter-rouge">pluto</code> with netstat. You can check out the
<a href="http://linux.die.net/man/5/ipsec.conf">ipsec manpage</a> or the <a href="https://github.com/xelerance/Openswan/wiki/L2tp-ipsec-configuration-using-openswan-and-xl2tpd">openswan
wiki
page</a>
for a little more information on some of the settings. Also I used <a href="http://www.freedesktop.org/software/systemd/man/systemd.service.html">this
page</a>
for some more info on how systemd settings work. Please let me know if
there's anything here that could be done easier/better for this
configuration.</p>
]]>
      </content>
    </entry>
  
    <entry>
      <title type="html"><![CDATA[iTerm theme based on the time of day]]></title>
      <link rel="alternate" type="text/html" href="http://smileykeith.com/2013/09/03/iterm-theme-based-on-the-time-of-day/" />
      <id>http://smileykeith.com/2013/09/03/iterm-theme-based-on-the-time-of-day</id>
      <updated>2013-09-03T10:56:00-07:00</updated>
      <author>
        
          <name><![CDATA[Keith Smiley]]></name>
        
      </author>
      <content type="html">
        <![CDATA[<p>One of the great things about Vim's textual configuration is it's
ability to contain logic based on outside factors. For the purpose of
this post I'm referring to the ability to set your colorscheme based on
the time of day with something like
<a href="https://github.com/keith/dotfiles/blob/a34e432b59e26225ebdb05737b30729b7ea670d9/vimrc#L102-L108">this</a>.</p>

<p>Having this functionality in Vim with the
<a href="http://ethanschoonover.com/solarized">Solarized</a> theme at night really
made me want this in <a href="http://www.iterm2.com/#/section/home">iTerm</a> as
well. Unfortunately iTerm's conifguration doesn't allow anything similar
to this. The closest you get is profiles which you can assign keyboard
shortcuts to for quickly opening windows with different colorschemes.
Luckily, thanks to this <a href="https://github.com/gnachman/iTerm2/pull/10">pull
request</a> two years ago from
<a href="https://twitter.com/junkiesxl">Piet Jaspers</a>, support was added for
scripting iTerm's entire colorscheme with AppleScript. Using these
AppleScript bindings I was able to create a
<a href="https://github.com/keith/dotfiles/blob/master/scripts/itermcolors.applescript">script</a>
that changes the entire colorscheme of iTerm based on the time of day
between Solarized light and dark. As you can see the
<a href="https://github.com/keith/dotfiles/blob/master/scripts/itermcolors.applescript#L27-L49">bulk</a>
of this script is just setting different color attributes based on the
theme you want. While you could do this conversion by hand to 65535
flavored RGB, I made a
tiny Objective-C app to automate the process which is <a href="https://github.com/keith/ColorConvert">on
Github</a>. You can download
the signed binary
<a href="https://github.com/keith/ColorConvert/releases/tag/1.0">here</a>.</p>

<p>Using this newly created AppleScript I then made a zsh
<a href="https://github.com/keith/dotfiles/blob/master/functions/colorize">function</a> so that I could call <code class="highlighter-rouge">colorize</code> from anywhere to update the color scheme of the current terminal.
I also chose to do this at the end of my <code class="highlighter-rouge">.zshrc</code> <a href="https://github.com/keith/dotfiles/blob/763e6f3f2bbcd93775c70e0d9ed9878ac99896a3/zshrc#L51">here</a>.
This way everytime I open a new session my theme is automatically set.</p>

<p>If you have any input on how I could optimize this let me know.</p>
]]>
      </content>
    </entry>
  
    <entry>
      <title type="html"><![CDATA[Global htaccess]]></title>
      <link rel="alternate" type="text/html" href="http://smileykeith.com/2013/08/14/global-htaccess/" />
      <id>http://smileykeith.com/2013/08/14/global-htaccess</id>
      <updated>2013-08-14T13:12:00-07:00</updated>
      <author>
        
          <name><![CDATA[Keith Smiley]]></name>
        
      </author>
      <content type="html">
        <![CDATA[<p>When starting a new web project one of the first things I do is download
the most up to date <a href="http://html5boilerplate.com/">HTML5 Boilerplate</a>.
It provides a great starting point for the HTML you need in a project.
It also comes with an extremely complete <a href="https://github.com/h5bp/html5-boilerplate/blob/master/.htaccess">.htaccess</a>
file. While this is very nice for a single site they recommend you do
something different for multiple sites at <a href="https://github.com/h5bp/html5-boilerplate/blob/21c614849afc5b518685b68d81d2b0c8f7971f0a/.htaccess#L4-L6">the very top</a>.</p>

<blockquote>
  <p>(!) Using .htaccess files slows down Apache, therefore, if you have access
to the main server config file (usually called httpd.conf), you should add
this logic there: http://httpd.apache.org/docs/current/howto/htaccess.html.</p>
</blockquote>

<p>This got me to their awesome collection of <a href="https://github.com/h5bp/server-configs">server configs</a>
which has their, and in many ways the communities, recommended settings
depending on your webserver. The <a href="https://github.com/h5bp/server-configs-apache">apache configs</a>
have the same <code class="highlighter-rouge">.htaccess</code> file so I decided to dig into how to do this.</p>

<p>They direct you to the <a href="http://httpd.apache.org/docs/current/howto/htaccess.html">apache article</a>
about using <code class="highlighter-rouge">.htaccess</code> files which has a similar comment about their
use.</p>

<blockquote>
  <p>You should avoid using .htaccess files completely if you have access to httpd main server config file
Using .htaccess files slows down your Apache http server. Any directive that you can include in a
.htaccess file is better set in a Directory block, as it will have the same effect with better performance.</p>
</blockquote>

<p>So I decided to set this up on my <a href="http://www.linode.com/?r=c190426bf1ff0f144b48997675bae8b32d339824">Linode VPS</a> which is running Ubuntu 10.04.
As stated in the original file comment they recommend using the
<code class="highlighter-rouge">httpd.conf</code> file for your custom configuration like this. But
<a href="http://stackoverflow.com/a/11687212/902968">apparently</a> that file could be
overwritten on updates of Apache which would be pretty annoying. Luckily
the default Apache config file (<code class="highlighter-rouge">apache2.conf</code> on 10.04) includes the
contents of the <code class="highlighter-rouge">conf.d</code> folder which is in the same location. By
creating a <code class="highlighter-rouge">foo.conf</code> file in that directory Apache should immediately
load its contents. As mentioned in the comment from the Apache site the
custom configuration needs to be wrapped in a <a href="http://httpd.apache.org/docs/current/mod/core.html#directory">Directory</a> block.
The block expects you to provide a path to the files you want to be
affected by the contained configuration. Since I wanted this to work for
all the sites being served by Apache I simply used <code class="highlighter-rouge">/srv/www/*/</code> which
includes my entire sites directory.</p>

<p>Besides the speed increased gained by using a global <code class="highlighter-rouge">.htaccess</code> file
this allows you to have much shorter custom files for site specific
configuration. For example only required configuration for one of my sites
was the <code class="highlighter-rouge">ErrorDocument</code>s. Now my <code class="highlighter-rouge">.htaccess</code> file went from 300+ lines
to</p>

<figure class="highlight"><pre><code class="language-apache" data-lang="apache"><span class="nc">ErrorDocument</span> 403 /403.php
<span class="nc">ErrorDocument</span> 404 /404.php
<span class="nc">ErrorDocument</span> 500 /500.php</code></pre></figure>

]]>
      </content>
    </entry>
  
    <entry>
      <title type="html"><![CDATA[OS X Crash Report Symbolication]]></title>
      <link rel="alternate" type="text/html" href="http://smileykeith.com/2013/08/09/os-x-crash-symbolication/" />
      <id>http://smileykeith.com/2013/08/09/os-x-crash-symbolication</id>
      <updated>2013-08-09T13:26:00-07:00</updated>
      <author>
        
          <name><![CDATA[Keith Smiley]]></name>
        
      </author>
      <content type="html">
        <![CDATA[<p>As you may know I write a small OS X called <a href="http://sailforapp.net/">Sail</a>. Over
the past few months that it has been available I've received a few crash reports
about an issue I wasn't able to reproduce. Today I decided I wanted to dive into
them and see if I could at least figure out the root of the issue and fix it
with my next release.</p>

<p>This lead me down the rabbit hole of
<a href="http://lldb.llvm.org/symbolication.html">symbolication</a>, something I personally
hadn't dealt with myself before (since Crashlytics does it for you). I was
hoping I would be able to find something around the internet about this,
unfortunately what I mostly came up with was a lot of iOS related answers that
didn't seem to work the same way and
<a href="http://developer.apple.com/tools/xcode/symbolizingcrashdumps.html">two</a>
<a href="http://developer.apple.com/library/mac/technotes/tn2004/tn2123.html">links</a> to
Apple documentation that have been removed. Other than the process for
symbolicating reports for OS X apps seems to be different than iOS apps which
there is plenty of documentation for (I'm not bitter). Daniel Jalkut has <a href="http://www.red-sweater.com/blog/439/crappy-crash-logs">a
post</a> about these but his
exact method didn't seem to work for me.</p>

<p>Here is what did work for me. For my first abridged crash report I had this</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Process:         Sail [35072]
Path:            /Applications/Sail.app/Contents/MacOS/Sail
Load Address:    0x106823000
Identifier:      com.keithsmiley.SailOSX
Version:         4 (1.2.0)
Code Type:       x86_64 (Native)
Parent Process:  launchd [207]

Date/Time:       2013-07-19 16:09:24.097 +0200
OS Version:      Mac OS X 10.8.4 (12E55)
Report Version:  8

Thread 0:
13  Accounts                        0x00007fff839fd1b1 -[ACAccountStore accountTypeWithAccountTypeIdentifier:] + 230
14  Sail                            0x00000001068308f7
15  Sail                            0x0000000106830798
16  Sail                            0x0000000106825249
17  CoreFoundation                  0x00007fff82465eda _CFXNotificationPost + 2554
18  Foundation                      0x00007fff8611b7b6 -[NSNotificationCenter postNotificationName:object:userInfo:] + 64
31  AppKit                          0x00007fff812cc1a3 -[NSApplication run] + 517
32  AppKit                          0x00007fff81270bd6 NSApplicationMain + 869
33  libdyld.dylib                   0x00007fff869d07e1 start + 0

Binary Images:
  0x106823000 - 0x106896fff  com.keithsmiley.SailOSX (1.2.0 - 4) &lt;D1F313B6-21F6-341B-8627-5480C5D1DB20&gt; /Applications/Sail.app/Contents/MacOS/Sail
</code></pre></div></div>

<p>Just glancing at this crash report it's not too difficult to understand a bit
about what was going on. A notification was sent, some methods were called in my
application and then <code class="highlighter-rouge">accountTypeWithAccountTypeIdentifier</code> was called. Based on
the small number of times I call that method I was quickly able to assume where
the issue was but I still wanted to see exactly what methods of mine were being
called first.</p>

<p>This brings me to <code class="highlighter-rouge">atos</code> the command line tool Apple provides to symbolicate
these reports. This is where my experience differs with most of what I found
online. My usage looked like this:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>atos -arch x86_64 -o Sail.app.dSYM/Contents/Resources/DWARF/Sail -l 0x106823000
</code></pre></div></div>

<p>This uses my dSYM file that was generated with the archive build I submitted to
the app store along with the knowledge that it was running on an x86_64
architecture and the most important part, for me, the load address.</p>

<p>To find my dSYM file that was generated when I did my archive build I simply
noted the version and build number from the crash report, went to the Archives
tab in the Xcode organizer, found the build with the same number, right clicked
and clicked "Show in Finder." This takes you directly to the <code class="highlighter-rouge">.xcarchive</code> file
on disk which you can right click and click "Show Package Contents." From there
I copied my dSYM to the desktop so I didn't overwrite anything unintentionally.</p>

<p>The load address is the starting memory address of your application. The tool
uses this address as an offset to find the correct methods in your symbols. In
the above crash report <code class="highlighter-rouge">Load Address</code> is a provided field. This was the only
report I saw that had that, typically I needed to look under the <code class="highlighter-rouge">Binary Images</code>
section for the address range of my application. In this example it was
<code class="highlighter-rouge">0x106823000 - 0x106896fff</code>.</p>

<p>The <code class="highlighter-rouge">atos</code> command then provides an interactive prompt where you can paste
addresses into the stdin and it will tell you the corresponding methods. Mine
looked like this:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0x00000001068308f7
-[KSAccountsPreferences dealloc] (in Sail) (KSAccountsPreferences.m:77)
0x0000000106830798
-[KSAccountsPreferences viewDidLoad] (in Sail) (KSAccountsPreferences.m:73)
0x0000000106825249
-[KSAppDelegate openAboutWindow:] (in Sail) (KSAppDelegate.m:59)
</code></pre></div></div>

<p>Here I can see that the notification that was being posted was probably an
<code class="highlighter-rouge">NSApplicationDidFinishLaunchingNotification</code> starting off some methods in my
app delegate. I then load the accounts preferences, which would make sense to
call the <code class="highlighter-rouge">ACAccountStore</code> method, but then <code class="highlighter-rouge">dealloc</code> is called. Seeing this was
an immediate red flag since <code class="highlighter-rouge">KSAccountsPreferences</code> should be retained since it
provides information about available accounts to the rest of the application.</p>

<p>I had another crash report from a different issue that was a little bit harder
to parse without symbolicating the methods.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Process:         Sail [47027]
Identifier:      com.keithsmiley.SailOSX
Version:         1.2.0 (4)
Code Type:       X86-64 (Native)
Parent Process:  launchd [45696]
User ID:         502

Application Specific Information:
*** Terminating app due to uncaught exception 'NSRangeException', reason: '*** -[__NSArrayM objectAtIndex:]: index 0 beyond bounds for empty array'
abort() called
terminate called throwing an exception

Application Specific Backtrace 1:
2   CoreFoundation                      0x000000010c5008ec -[__NSArrayM objectAtIndex:] + 252
3   Sail                                0x000000010b838eed Sail + 61165
4   Sail                                0x000000010b838f36 Sail + 61238
5   Sail                                0x000000010b838b19 Sail + 60185
6   Sail                                0x000000010b83785d Sail + 55389
7   libdispatch.dylib                   0x000000010fa07f01 _dispatch_call_block_and_release + 15

Binary Images:
  0x10b82a000 - 0x10b89dff7 +com.keithsmiley.SailOSX (1.2.0 - 4) &lt;47EC2733-B543-31EA-A6AA-9D998FB65803&gt;
</code></pre></div></div>

<p>Obviously this was caused by an invalid access to an array but that's a little harder to track down. So I again used <code class="highlighter-rouge">atos</code> with the dSYM and new memory location.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>atos -arch x86_64 -o Sail.app.dSYM/Contents/Resources/DWARF/Sail -l 0x10b82a000
</code></pre></div></div>

<p>I got this output for my memory addresses</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0x000000010b838eed
-[KSAccountsPreferences selectedADNUser] (in Sail) (KSAccountsPreferences.m:238)
0x000000010b838f36
-[KSAccountsPreferences selectTwitterUsername] (in Sail) (KSAccountsPreferences.m:243)
0x000000010b838b19
-[KSAccountsPreferences populateTwitterAccounts] (in Sail) (KSAccountsPreferences.m:211)
0x000000010b83785d
__36-[KSAccountsPreferences viewDidLoad]_block_invoke (in Sail) (KSAccountsPreferences.m:70)
</code></pre></div></div>

<p>This ended up giving me the exact line where out of bounds issue was happening
depending on a certain number of accounts. I noticed that this issue had been
fixed since my last release so I did a <code class="highlighter-rouge">diff</code> on the tag I created for that
specific release with</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git difftool HEAD..1.2.0\(3\)
</code></pre></div></div>

<p>Then in <a href="http://www.kaleidoscopeapp.com/">Kaleidoscope</a> I was able to figure out
what changed had fixed the issue. Just because it's so pretty here is what it
looked like.</p>

<p><img src="/images/symbolication/diff.png" alt="Diff" /></p>

<p>Symbolicating crash reports is definitely vital to tracking down bugs your users
are experiencing when you can't reproduce them yourself. Once you figure out how
it's obviously worth it.</p>

]]>
      </content>
    </entry>
  
    <entry>
      <title type="html"><![CDATA[The 'Best' Text Editor]]></title>
      <link rel="alternate" type="text/html" href="http://smileykeith.com/2013/05/22/the-best-text-editor/" />
      <id>http://smileykeith.com/2013/05/22/the-best-text-editor</id>
      <updated>2013-05-22T00:59:00-07:00</updated>
      <author>
        
          <name><![CDATA[Keith Smiley]]></name>
        
      </author>
      <content type="html">
        <![CDATA[<p>I'm tired of people asking about the 'best' IDE for xyz purpose. The answer to this question is there is no best. The answer is always 'it depends.' Not only does it depend on what you're doing but more importantly it depends on you. It depends on your work flow. It depends tons of other indiscernible factors.</p>

<p>It seems like people think they work in exactly the same way as enough other people. That asking this question will yield a useful result. The truth is that there are far fewer text editors than people who need text editors so it's impossible not to overlap with someone. We misconstrue this overlap in thinking that now this person knows exactly what we want. In reality they just happen to share some arbitrary subset of the way we  work and therefore ended up with the same text editor.</p>

<p>So how can you decide which editor is best for you? Try them. This sounds obvious to you? Good, this article is not for you and you can safely leave now. These days text editors are either free, cheap or have trials. So download them all try them out and see if they make sense to you. Weed out the ones you really hate or the ones that crash and spend a little more time with the remaining editors. Some, like Vim, you may have to spend a little more time with to grasp but this still doesn't seem like a high order.</p>

<p>But please stop asking questions on StackOverflow and similar sites where you expect people to throw their vote into the hat for the 'best' editor and make a decision for yourself.</p>

]]>
      </content>
    </entry>
  
    <entry>
      <title type="html"><![CDATA[Objective-C on Travis-CI]]></title>
      <link rel="alternate" type="text/html" href="http://smileykeith.com/2013/04/11/objective-c-on-travis-ci/" />
      <id>http://smileykeith.com/2013/04/11/objective-c-on-travis-ci</id>
      <updated>2013-04-11T15:58:00-07:00</updated>
      <author>
        
          <name><![CDATA[Keith Smiley]]></name>
        
      </author>
      <content type="html">
        <![CDATA[<p>Recently <a href="https://travis-ci.org/">Travis</a> added support for Objective-C and there for OS X and iOS projects for continuous integration testing. I gather that people have previously done this with self-hosted dedicated <a href="http://jenkins-ci.org/">Jenkins</a> machines but since Apple is so aggressive about dropping support for previous versions of the OS it seems like a pain to have to replace your build server every few years. Enter Travis, a great hosted <a href="http://en.wikipedia.org/wiki/Continuous_integration">continuous integration</a> server that hosts a huge amount of open source projects. I figured with this new support I could host some of my <a href="https://github.com/keith/KSADNTwitterFormatter">smaller</a> libraries just to set how well it worked. The initial setup process was a bit tedious but I eventually got it to work.</p>

<h3 id="assumtions">Assumtions:</h3>

<ul>
  <li>You have a test framework already integrated with your project (I like <a href="https://github.com/petejkim/specta">Specta</a>/<a href="https://github.com/petejkim/expecta">Expecta</a>)</li>
  <li>You have your project on Github in a public repository. Travis offers a <a href="http://about.travis-ci.org/docs/user/travis-pro/">pro</a> account if you'd rather</li>
</ul>

<h3 id="steps">Steps</h3>

<ul>
  <li>Create a <code class="highlighter-rouge">.travis.yml</code> file in the root of your repository (leading dot is intentional). For many projects a file may just look like:</li>
</ul>

<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="na">language</span><span class="pi">:</span> <span class="s">objective-c</span></code></pre></figure>

<p><del>By default Travis runs <a href="https://gist.github.com/henrikhodne/73151fccea7af3201f63">this script</a> for Objective-C projects</del> I was informed <a href="https://twitter.com/henrikhodne/status/322665896806060032">on Twitter</a> that the current script that runs Objective-C projects is actually located <a href="https://github.com/travis-ci/travis-cookbooks/blob/osx/ci_environment/travis_build_environment/files/default/ci_user/travis-utils/osx-cibuild.sh">here</a>. It was originally created by <a href="https://github.com/jspahrsummers">Justin Spahr-Summers</a> <a href="https://github.com/jspahrsummers/objc-build-scripts">here</a>. This script seems to run my projects without any issue, they just occasionally require more initial setup (we'll get to that).</p>

<ul>
  <li>
    <p>Enable your repository in Travis' settings. From your <a href="https://travis-ci.org/profile">Travis profile page</a> (after signing in with Github) you should see a list of your repositories, you may have to press 'Sync now', where you can switch on the repository you're planning on adding.</p>
  </li>
  <li>
    <p>Configure your project within Xcode. As I assumed above you already have a test target setup. You do have to do a few things in Xcode to make everything work correctly.</p>

    <ol>
      <li>Go to 'Manage Schemes' in Xcode. <img src="/images/travis/manageschemes.png" alt="Manage Schemes" /></li>
      <li>Check the 'Shared' box for the scheme that needs to be run. <img src="/images/travis/shareschemes.png" alt="Shared Scheme" /></li>
      <li>Click 'Edit…' in the bottom left and go to your build action. <img src="/images/travis/editscheme.png" alt="Edit Scheme" /></li>
      <li>On the row of your Tests target check the box in the 'Run' column. <img src="/images/travis/runtest.png" alt="Run Test" /></li>
    </ol>
  </li>
  <li>
    <p>At this point for a simple project or a project using <a href="http://cocoapods.org/">CocoaPods</a> you should be good to go. If Travis finds a <code class="highlighter-rouge">Podfile</code> in the root of your repository it automatically runs <code class="highlighter-rouge">pod install</code> to get your dependencies (from their <a href="http://about.travis-ci.org/docs/user/languages/objective-c/">docs</a>). Otherwise there are a ton of <a href="http://about.travis-ci.org/docs/user/build-configuration/">configuration options</a> for your <code class="highlighter-rouge">.travis.yml</code> depending on how your repo is setup.</p>
  </li>
</ul>

<p>For one of my projects I created a <code class="highlighter-rouge">setup.sh</code> file at the root of my repo that looks like this:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#!/usr/bin/env bash</span>

git submodule update <span class="nt">--init</span> <span class="nt">--recursive</span>
<span class="nb">echo</span> <span class="s2">"Setting up test frameworks..."</span>
<span class="nb">cd </span>Example/Vendor/Specta<span class="p">;</span> rake <span class="o">&gt;</span> /dev/null
<span class="nb">cd</span> ../Expecta<span class="p">;</span> rake <span class="o">&gt;</span> /dev/null
<span class="nb">echo</span> <span class="s2">"Done"</span>
<span class="nb">cd</span> ../../../</code></pre></figure>

<p>This script which I run using the <code class="highlighter-rouge">before_install: ./setup.sh</code> option in my <code class="highlighter-rouge">.travis.yml</code> gets all my submodules, sets up Specta and Expecta and then goes back to the root directory for running. If you just have a few simple steps you can also have multiple <code class="highlighter-rouge">before_install</code> actions like:</p>

<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="na">before_install</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">cd Example</span>
  <span class="pi">-</span> <span class="s">make</span></code></pre></figure>

<p>You can read more about other Travis configuration options in their <a href="http://about.travis-ci.org/docs/user/build-configuration/">documentation</a>.</p>

]]>
      </content>
    </entry>
  
    <entry>
      <title type="html"><![CDATA[OS X + ZFS]]></title>
      <link rel="alternate" type="text/html" href="http://smileykeith.com/2013/02/21/os-x-plus-zfs/" />
      <id>http://smileykeith.com/2013/02/21/os-x-plus-zfs</id>
      <updated>2013-02-21T11:28:00-08:00</updated>
      <author>
        
          <name><![CDATA[Keith Smiley]]></name>
        
      </author>
      <content type="html">
        <![CDATA[<p>For a long time people have talked about how horrible <a href="http://en.wikipedia.org/wiki/HFS_Plus">HFS+</a> is. Most notably, in my opinion, <a href="http://en.wikipedia.org/wiki/Linus_Torvalds">Linus Torvalds</a> (the creator of Linux and Git) who <a href="http://www.smh.com.au/news/technology/torvalds-pans-apples-os-x/2008/02/05/1202090393959.html">said</a> "Their file system is complete and utter crap, which is scary." <a href="https://twitter.com/siracusa">John Siracusa</a> also wrote about the problems with HFS+ in his <a href="http://arstechnica.com/apple/2011/07/mac-os-x-10-7/12/#hfs-problems">10.7 review</a> along with talking about it on his podcast, <a href="http://5by5.tv/hypercritical/">Hypercritical</a> in episodes <a href="http://5by5.tv/hypercritical/56">56</a> and <a href="http://5by5.tv/hypercritical/57">57</a>.</p>

<p>The gist of all this really is that Apple needs a new filesystem. It has been a while since Apple had <a href="http://en.wikipedia.org/wiki/ZFS">ZFS</a> support <a href="http://gizmodo.com/5018512/mac-os-x-snow-leopard-for-servers-getting-zfs">on their website</a> for release in Snow Leopard. After which Apple dropped ZFS support because of <a href="http://arstechnica.com/apple/2009/10/apple-abandons-zfs-on-mac-os-x-project-over-licensing-issues/">licensing issues</a>. There had been talks of Apple developing their own file system, although I think that's the wrong way to go. I think Apple needs to approach file systems the way they approached Safari with <a href="http://www.webkit.org/">Webkit</a>. I think they would be best served by picking up a liberally open source file system, such as <a href="http://en.wikipedia.org/wiki/Btrfs">BTRFS</a>, or grabbing up one of the ZFS <a href="http://code.google.com/p/maczfs/">ports</a> and continuing development while leaving it open for anyone to use. One of the great things about this approach is exactly what happened with Webkit and Google Chrome. Google decided to use the Webkit engine to make a product that competes with the main developers of the Webkit project. By doing this with a file system other vendors could use the same implementation and therefore increase development and in turn stability of whichever system was chosen (not to mention compatibility).</p>

<p>One thing is for sure. People who understand how integral a file system is <a href="http://arstechnica.com/apple/2013/02/zfs-loving-mac-users-demand-support-in-os-x-10-9/">want</a> something <a href="https://www.change.org/petitions/apple-os-x-10-9-support-opengl-4-3-and-zfs">modern</a>.</p>
]]>
      </content>
    </entry>
  
    <entry>
      <title type="html"><![CDATA[Terminal Shortcut in OS X]]></title>
      <link rel="alternate" type="text/html" href="http://smileykeith.com/2013/02/08/terminal-shortcut-in-os-x/" />
      <id>http://smileykeith.com/2013/02/08/terminal-shortcut-in-os-x</id>
      <updated>2013-02-08T09:59:00-08:00</updated>
      <author>
        
          <name><![CDATA[Keith Smiley]]></name>
        
      </author>
      <content type="html">
        <![CDATA[<p>One of my favorite defaults in some Linux distros is the ability to use CTRL+ALT+T to open a new terminal window. I wanted to enable this same functionality in OS X using <a href="http://qsapp.com/">Quicksilver</a>. I did this using <a href="http://www.iterm2.com/">iTerm 2</a> but you can do it with the default Terminal if that's what you want.</p>

<ol>
  <li>
    <p>Enable the <code class="highlighter-rouge">Terminal</code> and <code class="highlighter-rouge">iTerm2</code> Quicksilver plugins.
<img src="/images/qs-terminal/qs-plugins.png" alt="Quicksilver plugins" /></p>
  </li>
  <li>
    <p>Create a new custom hotkey trigger. Using the <code class="highlighter-rouge">Home</code> directory with the action <code class="highlighter-rouge">Open Directory in Terminal</code>
<img src="/images/qs-terminal/qs-triggers.png" alt="Quicksilver trigger" /></p>
  </li>
  <li>
    <p>Set it's hotkey using the drawer to whatever you want.
<img src="/images/qs-terminal/qs-hotkey.png" alt="Quicksilver hotkey" /></p>
  </li>
  <li>
    <p>Set your default <code class="highlighter-rouge">Command Line Interface</code> <code class="highlighter-rouge">Trigger</code> to <code class="highlighter-rouge">iTerm</code> (if that's what you want)
<img src="/images/qs-terminal/qs-cli.png" alt="Quicksilver CLI" /></p>
  </li>
</ol>

<p>You're done! Now you can easily press your hotkey and pull up a new iTerm/Terminal window whenever and wherever.</p>

]]>
      </content>
    </entry>
  
    <entry>
      <title type="html"><![CDATA[Automated Google Reader Backups]]></title>
      <link rel="alternate" type="text/html" href="http://smileykeith.com/2013/02/01/automated-google-reader-backups/" />
      <id>http://smileykeith.com/2013/02/01/automated-google-reader-backups</id>
      <updated>2013-02-01T12:30:00-08:00</updated>
      <author>
        
          <name><![CDATA[Keith Smiley]]></name>
        
      </author>
      <content type="html">
        <![CDATA[<p>I spend a lot of time in my RSS <a href="http://reederapp.com/">Reeder</a> (see what I did there?). I still find Google Reader to be the best and easiest way to manage my subscriptions, although I've been wanting to switch to <a href="http://feedafever.com/">Fever</a> for a while.</p>

<p>One thing I wanted to do when I launched my new site (the one you're reading) was to have a downloadable up to date export of my Google Reader OPML file (which of course I never did). I looked around for good ways to automate this and I found a simple Python script to do it with (sorry I couldn't find it again for this post). I decided to rewrite it in Ruby and set it up on my server as an automated cron job.</p>

<p>To run the script I came up with use something like:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">ruby path/to/googleReaderOPML.rb username@gmail.com SekretPassword</code></pre></figure>

<p>To add it to your crontab (to run every Sunday at 1:01am) use something like:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">1 1 <span class="k">*</span> <span class="k">*</span> 7 ruby path/to/googleReaderOPML.rb username@gmail.com SekretPassword</code></pre></figure>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1">#!/usr/bin/env ruby</span>

<span class="c1">#</span>
<span class="c1"># =&gt; This script will authorize your Google credentials and download your Google Reader subscriptions</span>
<span class="c1"># =&gt; Usage: ./googleReaderOPML.rb GOOGLEUSERNAME PASSWORD</span>
<span class="c1">#</span>

<span class="c1"># The required networking shenanigans</span>
<span class="nb">require</span> <span class="s1">'uri'</span>
<span class="nb">require</span> <span class="s1">'net/http'</span>
<span class="nb">require</span> <span class="s1">'open-uri'</span>

<span class="nb">require</span> <span class="s1">'rubygems'</span>
<span class="c1"># This requires the 'colorize' gem. Install with '[sudo] gem install colorize'</span>
<span class="nb">require</span> <span class="s1">'colorize'</span>


<span class="c1"># The base Google URLs for callback, authentication, and subscription export</span>
<span class="vg">$GOOGLE_URL</span> <span class="o">=</span> <span class="s2">"http://www.google.com"</span>
<span class="vg">$LOGIN_URL</span> <span class="o">=</span> <span class="s2">"https://www.google.com/accounts/ClientLogin"</span>
<span class="vg">$READER_URL</span> <span class="o">=</span> <span class="s2">"http://www.google.com/reader/subscriptions/export"</span>

<span class="c1"># The user agent string, for some reason this is required, feel free to change it</span>
<span class="vg">$SOURCE</span> <span class="o">=</span> <span class="s2">"keith.so"</span>

<span class="c1"># The default output filename, it is automatically overwritten if one already exists</span>
<span class="vg">$FILE_NAME</span> <span class="o">=</span> <span class="s2">"googlereadersubscriptions.opml"</span>


<span class="c1"># Make sure there is the correct number of arguments</span>
<span class="k">if</span> <span class="no">ARGV</span><span class="p">.</span><span class="nf">count</span> <span class="o">!=</span> <span class="mi">2</span>
	<span class="c1"># Print the instruction</span>
	<span class="nb">puts</span> <span class="s2">"Usage: ./</span><span class="si">#{</span> <span class="no">File</span><span class="p">.</span><span class="nf">basename</span><span class="p">(</span><span class="kp">__FILE__</span><span class="p">)</span> <span class="si">}</span><span class="s2"> USERNAME PASSWORD"</span><span class="p">.</span><span class="nf">red</span>
	<span class="nb">exit</span>
<span class="k">end</span>

<span class="c1"># Build the request URL</span>
<span class="n">uri</span> <span class="o">=</span> <span class="no">URI</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="vg">$LOGIN_URL</span><span class="p">)</span>

<span class="c1"># Setup the Parameters</span>
<span class="n">params</span> <span class="o">=</span> <span class="p">{</span> <span class="no">Email</span><span class="p">:</span> <span class="no">ARGV</span><span class="p">.</span><span class="nf">first</span><span class="p">,</span> <span class="no">Passwd</span><span class="p">:</span> <span class="no">ARGV</span><span class="p">.</span><span class="nf">last</span><span class="p">,</span> <span class="ss">service: </span><span class="s2">"reader"</span><span class="p">,</span> <span class="ss">source: </span><span class="vg">$SOURCE</span><span class="p">,</span> <span class="ss">continue: </span><span class="vg">$GOOGLE_URL</span> <span class="p">}</span>

<span class="c1"># Add the user-agent string, my website (feel free to replace it) to the headers</span>
<span class="n">headers</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">"User-agent"</span> <span class="o">=&gt;</span> <span class="vg">$SOURCE</span> <span class="p">}</span>

<span class="c1"># Encode the parameters into the url</span>
<span class="n">uri</span><span class="p">.</span><span class="nf">query</span> <span class="o">=</span> <span class="no">URI</span><span class="p">.</span><span class="nf">encode_www_form</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>

<span class="c1"># Create a new NET:HTTP object with the request URL</span>
<span class="n">http</span> <span class="o">=</span> <span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">uri</span><span class="p">.</span><span class="nf">host</span><span class="p">,</span> <span class="n">uri</span><span class="p">.</span><span class="nf">port</span><span class="p">)</span>

<span class="c1"># Require HTTPS without this net/http will not be happy with you</span>
<span class="n">http</span><span class="p">.</span><span class="nf">use_ssl</span> <span class="o">=</span> <span class="kp">true</span>

<span class="c1"># Execute the request</span>
<span class="n">request</span> <span class="o">=</span> <span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="o">::</span><span class="no">Get</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">uri</span><span class="p">.</span><span class="nf">request_uri</span><span class="p">,</span> <span class="n">headers</span><span class="p">)</span>

<span class="c1"># Get the data from the request</span>
<span class="n">response</span> <span class="o">=</span> <span class="n">http</span><span class="p">.</span><span class="nf">request</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>

<span class="c1"># Check for valid response code, should ONLY be 200</span>
<span class="k">if</span> <span class="n">response</span><span class="p">.</span><span class="nf">code</span> <span class="o">!=</span> <span class="s1">'200'</span>
	<span class="nb">puts</span> <span class="s2">"Google returned </span><span class="si">#{</span> <span class="n">response</span><span class="p">.</span><span class="nf">code</span> <span class="si">}</span><span class="s2">, check your username and password"</span><span class="p">.</span><span class="nf">red</span>
	<span class="nb">exit</span>
<span class="k">end</span>

<span class="c1"># split each token into a different item then load them each into a hash with the key as the token key</span>
<span class="n">auth_hash</span> <span class="o">=</span> <span class="no">Hash</span><span class="p">.</span><span class="nf">new</span>
<span class="n">response</span><span class="p">.</span><span class="nf">body</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sr">/\n/</span><span class="p">).</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">token</span><span class="o">|</span>
	<span class="n">split_array</span> <span class="o">=</span> <span class="n">token</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="s1">'='</span><span class="p">)</span>
	<span class="n">auth_hash</span><span class="p">[</span><span class="n">split_array</span><span class="p">.</span><span class="nf">first</span><span class="p">.</span><span class="nf">downcase</span><span class="p">]</span> <span class="o">=</span> <span class="n">split_array</span><span class="p">.</span><span class="nf">last</span>
<span class="k">end</span>

<span class="c1"># Create a header hash for the request of the XML file</span>
<span class="n">headers</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">"user-agent"</span> <span class="o">=&gt;</span> <span class="vg">$SOURCE</span><span class="p">,</span> <span class="s2">"cookie"</span> <span class="o">=&gt;</span> <span class="s2">"Name=SID;SID=</span><span class="si">#{</span> <span class="n">auth_hash</span><span class="p">[</span><span class="s1">'sid'</span><span class="p">]</span> <span class="si">}</span><span class="s2">;Domain=.google.com;Path=/;Expires=160000000000"</span><span class="p">,</span> <span class="s2">"authorization"</span> <span class="o">=&gt;</span> <span class="s2">"GoogleLogin auth=</span><span class="si">#{</span> <span class="n">auth_hash</span><span class="p">[</span><span class="s1">'auth'</span><span class="p">]</span> <span class="si">}</span><span class="s2">"</span> <span class="p">}</span>

<span class="c1"># Open the URL for the Google Reader export with the setup headers</span>
<span class="n">request</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="vg">$READER_URL</span><span class="p">,</span> <span class="n">headers</span><span class="p">)</span>

<span class="c1"># Open the received XML feeds file</span>
<span class="n">google_reader_file</span> <span class="o">=</span> <span class="no">File</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">)</span>

<span class="c1"># Read the entire feeds file into 'subscriptions'</span>
<span class="n">subscriptions</span> <span class="o">=</span> <span class="n">google_reader_file</span><span class="p">.</span><span class="nf">read</span>

<span class="c1"># Close the downloaded file</span>
<span class="n">google_reader_file</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>

<span class="c1"># Open a new file with the global filename to write to, overwrite it if it exists</span>
<span class="n">subscriptions_file</span> <span class="o">=</span> <span class="no">File</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="vg">$FILE_NAME</span><span class="p">,</span> <span class="s1">'w'</span><span class="p">)</span>

<span class="c1"># Verify the file was created</span>
<span class="k">if</span> <span class="no">File</span><span class="p">.</span><span class="nf">exists?</span><span class="p">(</span><span class="n">subscriptions_file</span><span class="p">)</span>
	<span class="c1"># Write the subscriptions to the file and close it</span>
	<span class="n">subscriptions_file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">subscriptions</span><span class="p">)</span>
	<span class="n">subscriptions_file</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>

	<span class="c1"># Display a success message</span>
	<span class="nb">puts</span> <span class="s2">"Wrote Google Reader subscriptions to </span><span class="si">#{</span> <span class="vg">$FILE_NAME</span> <span class="si">}</span><span class="s2">"</span><span class="p">.</span><span class="nf">green</span>
<span class="k">else</span>
	<span class="c1"># If the file wasn't created print an error</span>
	<span class="nb">puts</span> <span class="s2">"Couldn't write to </span><span class="si">#{</span> <span class="vg">$FILE_NAME</span> <span class="si">}</span><span class="s2"> (the process running this script may not have sufficient privileges"</span><span class="p">.</span><span class="nf">red</span>
<span class="k">end</span></code></pre></figure>

]]>
      </content>
    </entry>
  
    <entry>
      <title type="html"><![CDATA[Boredom]]></title>
      <link rel="alternate" type="text/html" href="http://smileykeith.com/2013/02/01/boredom/" />
      <id>http://smileykeith.com/2013/02/01/boredom</id>
      <updated>2013-02-01T11:03:00-08:00</updated>
      <author>
        
          <name><![CDATA[Keith Smiley]]></name>
        
      </author>
      <content type="html">
        <![CDATA[<p>Working as a developer full-time can be very exciting. Dealing with new interesting problems gets me up in the morning. But I still find that after a few months of a specific project I find myself less and less interested with it. Not only projects but concepts and languages start to become less interesting. First it was websites then Objective-C then Ruby then C and now who knows. This scares me. At this point in my life I hope to work in this field for my 'career' meaning a significant amount of time. Yet I can't even keep myself working on a single project now, much less one that doesn't interest me.</p>

<p>I typically blame this on the difficulty of the project. As a lone developer I find that most projects I work on are pretty small in scope, since I just don't have the time or people-power to work on anything larger. Therefore I look at most of my projects without interest. I'm not sure what it will take to keep myself engaged and interested on my next project.</p>
]]>
      </content>
    </entry>
  
    <entry>
      <title type="html"><![CDATA[Learning C]]></title>
      <link rel="alternate" type="text/html" href="http://smileykeith.com/2013/01/27/learning-c/" />
      <id>http://smileykeith.com/2013/01/27/learning-c</id>
      <updated>2013-01-27T22:59:00-08:00</updated>
      <author>
        
          <name><![CDATA[Keith Smiley]]></name>
        
      </author>
      <content type="html">
        <![CDATA[<p>I've been using Objective-C and C++ for a while now. While I feel like I know them pretty well I had absolutely no grasp on C itself. Obviously when using those languages you pick up a bit about data types and conditionals but you couldn't take that knowledge and completely write something non-trivial in C. Because of this I figured it might be worth some time so I started looking for viable resources. In that search I found Learn Code the Hard way. They publish physical and online books on different languages and so far I've found it to be a delight. It's not your typical easy walk through and on lessons 17 (of 51) you'll start actually having to think. This for me has been much better so far than typically online learning where the introductory course ends on how to write a for loop.</p>

<p>If you're interested in picking up a C background I would definitely recommend you start here.</p>

]]>
      </content>
    </entry>
  
    <entry>
      <title type="html"><![CDATA[NSTableView vim keys]]></title>
      <link rel="alternate" type="text/html" href="http://smileykeith.com/2013/01/08/nstableview-vim-keys/" />
      <id>http://smileykeith.com/2013/01/08/nstableview-vim-keys</id>
      <updated>2013-01-08T16:19:00-08:00</updated>
      <author>
        
          <name><![CDATA[Keith Smiley]]></name>
        
      </author>
      <content type="html">
        <![CDATA[<p>I'm currently working on a OS X application that uses a few different NSTableViews to display user data. I was testing them out a bit to make sure multiple deletions worked correctly from my database and I found myself pressing 'j' and 'k' to try and move down and up. I decided it would be pretty cool to implement those two vim shortcuts into my table view just in case anyone else thinks like me.</p>

<p>This functionality already exists in <a href="http://www.potionfactory.com/thehitlist/">The Hit List</a> an awesome GTD app that has a lot of baggage with me, and I'm sure it exists in other applications as well.</p>

<p>In my <code class="highlighter-rouge">NSTableView</code> subclass' <code class="highlighter-rouge">keyDown:</code> method I tried a few things.</p>

<p>Attempt 1: First I tried to re implement the functionality myself. In retrospect this doesn't make any sense but at first it was pretty simple. It looked something like this.</p>

<figure class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="n">NSUInteger</span> <span class="n">flags</span> <span class="o">=</span> <span class="p">[</span><span class="n">theEvent</span> <span class="nf">modifierFlags</span><span class="p">]</span> <span class="o">&amp;</span> <span class="n">NSDeviceIndependentModifierFlagsMask</span><span class="p">;</span>
<span class="n">NSNumber</span> <span class="o">*</span><span class="n">shiftPressed</span> <span class="o">=</span> <span class="p">(</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">NSShiftKeyMask</span><span class="p">);</span>
 
<span class="k">if</span> <span class="p">([</span><span class="n">theEvent</span> <span class="nf">keyCode</span><span class="p">]</span> <span class="o">==</span> <span class="mi">38</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// j</span>
    <span class="n">NSUInteger</span> <span class="n">index</span> <span class="o">=</span> <span class="p">[[</span><span class="n">self</span> <span class="nf">selectedRowIndexes</span><span class="p">]</span> <span class="nf">lastIndex</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">([</span><span class="n">shiftPressed</span> <span class="nf">boolValue</span><span class="p">])</span> <span class="p">{</span>
        <span class="p">[</span><span class="n">self</span> <span class="nf">selectRowIndexes</span><span class="p">:[</span><span class="n">NSIndexSet</span> <span class="nf">indexSetWithIndex</span><span class="p">:</span><span class="n">index</span><span class="p">]</span> <span class="nf">byExtendingSelection</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="p">[</span><span class="n">self</span> <span class="nf">selectRowIndexes</span><span class="p">:[</span><span class="n">NSIndexSet</span> <span class="nf">indexSetWithIndex</span><span class="p">:</span><span class="n">index</span><span class="p">]</span> <span class="nf">byExtendingSelection</span><span class="p">:</span><span class="nb">NO</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="p">([</span><span class="n">theEvent</span> <span class="nf">keyCode</span><span class="p">]</span> <span class="o">==</span> <span class="mi">40</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// k</span>
    <span class="n">NSUInteger</span> <span class="n">index</span> <span class="o">=</span> <span class="p">[[</span><span class="n">self</span> <span class="nf">selectedRowIndexes</span><span class="p">]</span> <span class="nf">lastIndex</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">([</span><span class="n">shiftPressed</span> <span class="nf">boolValue</span><span class="p">])</span> <span class="p">{</span>
        <span class="p">[</span><span class="n">self</span> <span class="nf">selectRowIndexes</span><span class="p">:[</span><span class="n">NSIndexSet</span> <span class="nf">indexSetWithIndex</span><span class="p">:</span><span class="n">index</span><span class="p">]</span> <span class="nf">byExtendingSelection</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="p">[</span><span class="n">self</span> <span class="nf">selectRowIndexes</span><span class="p">:[</span><span class="n">NSIndexSet</span> <span class="nf">indexSetWithIndex</span><span class="p">:</span><span class="n">index</span><span class="p">]</span> <span class="nf">byExtendingSelection</span><span class="p">:</span><span class="nb">NO</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>The issue with this is the way <code class="highlighter-rouge">NSTableView</code> typically expands it's selection. I think of it as a pivot point where you start. Then you go up and down relative to that point. So if you start at index 2 and go down till index 4, you should have 2 rows selected. Then when you go back up you should deselect the rows and indexes 3 and 4 and select the rows and index 1 and 0. At this point I realized it was more difficult than I realized at first and went in search on another solution.</p>

<p>Attempt 2: The next solution I discovered used the <a href="https://developer.apple.com/library/mac/#documentation/Carbon/Reference/QuartzEventServicesRef/Reference/reference.html">Quartz Event Services</a> APIs.</p>

<figure class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="k">if</span> <span class="p">([</span><span class="n">theEvent</span> <span class="nf">keyCode</span><span class="p">]</span> <span class="o">==</span> <span class="mi">38</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// The letter 'j'</span>
    <span class="n">CGEventRef</span> <span class="n">e</span> <span class="o">=</span> <span class="n">CGEventCreateKeyboardEvent</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="p">(</span><span class="n">CGKeyCode</span><span class="p">)</span><span class="mi">125</span><span class="p">,</span> <span class="nb">true</span><span class="p">);</span>
    <span class="n">CGEventPost</span><span class="p">(</span><span class="n">kCGSessionEventTap</span><span class="p">,</span> <span class="n">e</span><span class="p">);</span>
    <span class="n">CFRelease</span><span class="p">(</span><span class="n">e</span><span class="p">);</span>
<span class="p">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="p">([</span><span class="n">theEvent</span> <span class="nf">keyCode</span><span class="p">]</span> <span class="o">==</span> <span class="mi">40</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// The letter 'k'</span>
    <span class="n">CGEventRef</span> <span class="n">e</span> <span class="o">=</span> <span class="n">CGEventCreateKeyboardEvent</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="p">(</span><span class="n">CGKeyCode</span><span class="p">)</span><span class="mi">126</span><span class="p">,</span> <span class="nb">true</span><span class="p">);</span>
    <span class="n">CGEventPost</span><span class="p">(</span><span class="n">kCGSessionEventTap</span><span class="p">,</span> <span class="n">e</span><span class="p">);</span>
    <span class="n">CFRelease</span><span class="p">(</span><span class="n">e</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>This solution worked perfectly, at first. This mainly emulates a key press with a different key code. So as you can see I was catching j and k and spitting them out as down and up. I spent a few minutes testing this before I remembered that I had sandboxing disabled so I could more easily delete my application support folder while messing with my Core Data stack. There went that solution.</p>

<p>Attempt 3: Before I used the weird <code class="highlighter-rouge">CGEventRef</code> solution I tried to create my own <code class="highlighter-rouge">NSEvent</code> passing it all the same attributes from the original event (all this code is being used in the <code class="highlighter-rouge">keyDown:</code> function of my subclass) but I couldn't figure out how to get the correct character string for the up and down arrows. I typically use <a href="http://manytricks.com/keycodes/">Key Codes</a> to get all the possible information you could want about each key you press. But for some keys, including the arrow keys, it returns garbage for the character code. Then I discovered <a href="http://stackoverflow.com/a/4434934/902968">this answer</a> on StackOverflow where there is a brief mention of <code class="highlighter-rouge">NSUpArrowFunctionKey</code>. With that I came up with this.</p>

<figure class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="k">if</span> <span class="p">([</span><span class="n">theEvent</span> <span class="nf">keyCode</span><span class="p">]</span> <span class="o">==</span> <span class="mi">38</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// j</span>
    <span class="n">unichar</span> <span class="n">down</span> <span class="o">=</span> <span class="n">NSDownArrowFunctionKey</span><span class="p">;</span>
    <span class="n">NSString</span> <span class="o">*</span><span class="n">downString</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nf">stringWithCharacters</span><span class="p">:</span><span class="o">&amp;</span><span class="n">down</span> <span class="nf">length</span><span class="p">:</span><span class="mi">1</span><span class="p">];</span>
    <span class="n">NSEvent</span> <span class="o">*</span><span class="n">newEvent</span> <span class="o">=</span><span class="p">[</span><span class="n">NSEvent</span> <span class="nf">keyEventWithType</span><span class="p">:</span><span class="n">NSKeyDown</span>
                                        <span class="nl">location:</span><span class="n">theEvent</span><span class="p">.</span><span class="n">locationInWindow</span>
                                   <span class="nl">modifierFlags:</span><span class="n">theEvent</span><span class="p">.</span><span class="n">modifierFlags</span>
                                       <span class="nl">timestamp:</span><span class="n">theEvent</span><span class="p">.</span><span class="n">timestamp</span>
                                    <span class="nl">windowNumber:</span><span class="n">theEvent</span><span class="p">.</span><span class="n">windowNumber</span>
                                         <span class="nl">context:</span><span class="nb">nil</span>
                                      <span class="nl">characters:</span><span class="n">downString</span>
                     <span class="nl">charactersIgnoringModifiers:</span><span class="n">downString</span>
                                       <span class="nl">isARepeat:</span><span class="n">theEvent</span><span class="p">.</span><span class="n">isARepeat</span>
                                         <span class="nl">keyCode:</span><span class="n">down</span><span class="p">];</span>
    
    <span class="p">[</span><span class="n">super</span> <span class="nf">keyDown</span><span class="p">:</span><span class="n">newEvent</span><span class="p">];</span>
<span class="p">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="p">([</span><span class="n">theEvent</span> <span class="nf">keyCode</span><span class="p">]</span> <span class="o">==</span> <span class="mi">40</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// k</span>
    <span class="n">unichar</span> <span class="n">up</span> <span class="o">=</span> <span class="n">NSUpArrowFunctionKey</span><span class="p">;</span>
    <span class="n">NSString</span> <span class="o">*</span><span class="n">upString</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nf">stringWithCharacters</span><span class="p">:</span><span class="o">&amp;</span><span class="n">up</span> <span class="nf">length</span><span class="p">:</span><span class="mi">1</span><span class="p">];</span>
    <span class="n">NSEvent</span> <span class="o">*</span><span class="n">newEvent</span> <span class="o">=</span><span class="p">[</span><span class="n">NSEvent</span> <span class="nf">keyEventWithType</span><span class="p">:</span><span class="n">NSKeyDown</span>
                                        <span class="nl">location:</span><span class="n">theEvent</span><span class="p">.</span><span class="n">locationInWindow</span>
                                   <span class="nl">modifierFlags:</span><span class="n">theEvent</span><span class="p">.</span><span class="n">modifierFlags</span>
                                       <span class="nl">timestamp:</span><span class="n">theEvent</span><span class="p">.</span><span class="n">timestamp</span>
                                    <span class="nl">windowNumber:</span><span class="n">theEvent</span><span class="p">.</span><span class="n">windowNumber</span>
                                         <span class="nl">context:</span><span class="nb">nil</span>
                                      <span class="nl">characters:</span><span class="n">upString</span>
                     <span class="nl">charactersIgnoringModifiers:</span><span class="n">upString</span>
                                       <span class="nl">isARepeat:</span><span class="n">theEvent</span><span class="p">.</span><span class="n">isARepeat</span>
                                         <span class="nl">keyCode:</span><span class="n">up</span><span class="p">];</span>
    
    <span class="p">[</span><span class="n">super</span> <span class="nf">keyDown</span><span class="p">:</span><span class="n">newEvent</span><span class="p">];</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="p">[</span><span class="n">super</span> <span class="nf">keyDown</span><span class="p">:</span><span class="n">theEvent</span><span class="p">];</span>
<span class="p">}</span></code></pre></figure>

<p>Not the prettiest solution I but one that seems to work perfectly, even sandboxed, to provide the expected behavior in an <code class="highlighter-rouge">NSTableView</code> subclass.</p>
]]>
      </content>
    </entry>
  
    <entry>
      <title type="html"><![CDATA[Backing up with Capistrano]]></title>
      <link rel="alternate" type="text/html" href="http://smileykeith.com/2013/01/05/backing-up-with-capistrano/" />
      <id>http://smileykeith.com/2013/01/05/backing-up-with-capistrano</id>
      <updated>2013-01-05T12:12:00-08:00</updated>
      <author>
        
          <name><![CDATA[Keith Smiley]]></name>
        
      </author>
      <content type="html">
        <![CDATA[<p>We all know not backing up has <a href="http://www.wired.com/gadgetlab/2012/08/apple-amazon-mat-honan-hacking/">consequences</a>. While losing sentimental files would definitely ruin your day, losing your web server's data could be even worse. I've mentioned <a href="http://smileykeith.com/2013/01/02/linode-setup/">before</a> that I use <a href="http://www.linode.com/?r=c190426bf1ff0f144b48997675bae8b32d339824">Linode</a> for my server hosting, and while they do offer an <a href="http://library.linode.com/backup-service">automated backup service</a> I decided I'd rather setup my own solution to back up periodically to my local machine.</p>

<p>Many people use <a href="http://en.wikipedia.org/wiki/Rsync">rsync</a> to do their server backups. In fact Linode even has a <a href="http://library.linode.com/linux-tools/utilities/rsync#sph_use-rsync-to-back-up-production-environments">guide</a> on how to set it up (there's a better one <a href="http://feross.org/how-to-setup-your-linode/">here</a>). I decided that instead of a 1 for 1 directory backup, I would prefer to have a <a href="http://en.wikipedia.org/wiki/Tar_(file_format)">tarball</a> of the contents. While I could've easily done this with a few bash commands from the server that's not particular ideal for my setup. My local machines don't run 24/7 so if I set it up on the server to automate the backup every week, it may try to initiate the backup when my machine was off (I could try to guess when it's on every week but that's not ideal either).</p>

<p>The obvious solution to this is run it from my local machine instead every week. That way once a week when it's powered up it would log in to the server, create the tarball and pull it down. Insert <a href="https://github.com/capistrano/capistrano">Capistrano</a> (<code class="highlighter-rouge">[sudo] gem install capistrano</code>) a <a href="http://rubygems.org/">RubyGem</a> for 'Remote multi-server automation.' So I wrote a very basic <code class="highlighter-rouge">Capfile</code> to automate this for me (replace the path to your <code class="highlighter-rouge">www</code> folder accordingly).</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">load</span> <span class="s1">'deploy'</span>

<span class="vg">$SERVER_USER</span> <span class="o">=</span> <span class="s2">"username"</span>
<span class="vg">$SERVER_IP</span>   <span class="o">=</span> <span class="s2">"1.1.1.1"</span>

<span class="n">desc</span> <span class="s2">"Backs up server www files"</span>
<span class="n">task</span> <span class="ss">:backup</span><span class="p">,</span> <span class="ss">:hosts</span> <span class="o">=&gt;</span> <span class="vg">$SERVER_IP</span> <span class="k">do</span>
  <span class="n">run</span> <span class="s2">"cd /srv; tar -pvczf ~/backup.tar.gz www/"</span>
  <span class="n">run_locally</span> <span class="s2">"scp </span><span class="si">#{</span> <span class="vg">$SERVER_USER</span> <span class="si">}</span><span class="s2">@</span><span class="si">#{</span> <span class="vg">$SERVER_IP</span> <span class="si">}</span><span class="s2">:~/backup.tar.gz ~/Dropbox/Backups/Server"</span>
<span class="k">end</span></code></pre></figure>

<p>Then I added this to my crontab on my local machine by running <code class="highlighter-rouge">crontab -e</code> and adding the line:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">@weekly /Users/ksmiley/.rbenv/shims/cap <span class="nt">-f</span> ~/path/to/Capfile backup</code></pre></figure>

<p>I included the path to the Capistrano executable since cron (on OS X) executes tasks with <code class="highlighter-rouge">sh</code>, which isn't setup with my <code class="highlighter-rouge">$PATH</code>.</p>

]]>
      </content>
    </entry>
  
    <entry>
      <title type="html"><![CDATA[Raking Podspecs]]></title>
      <link rel="alternate" type="text/html" href="http://smileykeith.com/2013/01/04/raking-podspecs/" />
      <id>http://smileykeith.com/2013/01/04/raking-podspecs</id>
      <updated>2013-01-04T11:09:00-08:00</updated>
      <author>
        
          <name><![CDATA[Keith Smiley]]></name>
        
      </author>
      <content type="html">
        <![CDATA[<p>I spend a decent amount of time these days helping maintain the <a href="http://cocoapods.org/">CocoaPods</a> <a href="http://github.com/cocoapods/specs">specs repo</a> by managing pull requests and issues. CococaPods is an awesome dependency manager similar to <a href="http://rubygems.org/">Rubygems</a> for Objective-C projects. Unfortunately a lot of submitted podspecs haven't been correctly formatted or they're missing required information. CocoaPods has an awesome build in command <code class="highlighter-rouge">pod spec lint</code> that allows you to make sure the spec is valid and complete. Understandably people who are new to CocoaPods trying to submit their libraries are unaware of this awesome tool. Therefore when I look through the pull requests, I like to lint them myself (CocoaPods does <a href="https://travis-ci.org/CocoaPods/Specs">utilize Travis</a> but unfortunately it can't do everything).</p>

<p>Since CocoaPods supports multiple versions of Ruby (1.8.7 and 1.9.3) to be complete ideally you'd lint them on both versions. Tools like <a href="https://rvm.io/">RVM</a> and <a href="https://github.com/sstephenson/rbenv">rbenv</a>(my tool of choice) make it easy to quickly switch between different versions of Ruby using <code class="highlighter-rouge">.rvmrc</code> and <code class="highlighter-rouge">.rbenv-version</code> respectively. As you can probably assume I wanted to automate this. So I wrote a quick <a href="http://rake.rubyforge.org/">Rakefile</a> to do this for me.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1">#!/usr/bin/env rake</span>

<span class="c1"># NOTE: Must be using rbenv 4.0 to use `system` and `.ruby-version`</span>
<span class="c1">## Set your preferred ruby versions</span>
<span class="vg">$V18</span> <span class="o">=</span> <span class="s1">'system'</span>
<span class="vg">$V19</span> <span class="o">=</span> <span class="s1">'1.9.3-p385'</span>
<span class="vg">$RBENV</span> <span class="o">=</span> <span class="s1">'.ruby-version'</span>

<span class="c1"># The gem to use</span>
<span class="vg">$GEM</span> <span class="o">=</span> <span class="s1">'cocoapods'</span>

<span class="n">task</span> <span class="ss">:default</span> <span class="o">=&gt;</span> <span class="ss">:lint</span>
<span class="n">task</span> <span class="ss">:c</span>       <span class="o">=&gt;</span> <span class="ss">:clean</span>

<span class="n">desc</span> <span class="s2">"Lint podspecs on multiple versions of ruby with rbenv"</span>
<span class="n">task</span> <span class="ss">:lint</span> <span class="k">do</span>
  <span class="k">if</span> <span class="no">Dir</span><span class="p">.</span><span class="nf">glob</span><span class="p">(</span><span class="s1">'*.podspec'</span><span class="p">).</span><span class="nf">count</span> <span class="o">&lt;</span> <span class="mi">1</span>
    <span class="nb">puts</span> <span class="s2">"No podspecs in </span><span class="si">#{</span> <span class="no">Dir</span><span class="p">.</span><span class="nf">pwd</span> <span class="si">}</span><span class="s2">"</span>
    <span class="nb">exit</span>
  <span class="k">end</span>

  <span class="n">existed</span> <span class="o">=</span> <span class="n">versionFileExists?</span>
  <span class="k">if</span> <span class="n">existed</span>
    <span class="n">old_version</span> <span class="o">=</span> <span class="n">currentVersion</span>
  <span class="k">end</span>

  <span class="c1"># Loop through all podspecs</span>
  <span class="no">Dir</span><span class="p">.</span><span class="nf">glob</span><span class="p">(</span><span class="s1">'*.podspec'</span><span class="p">).</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
    <span class="c1"># Loop through ruby versions</span>
    <span class="mi">2</span><span class="p">.</span><span class="nf">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
      <span class="n">version</span> <span class="o">=</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">?</span> <span class="vg">$V18</span> <span class="p">:</span> <span class="vg">$V19</span>
      <span class="n">writeVersion</span><span class="p">(</span><span class="n">version</span><span class="p">)</span>

      <span class="nb">puts</span> <span class="s2">"Linting </span><span class="si">#{</span> <span class="n">file</span> <span class="si">}</span><span class="s2"> on Ruby version </span><span class="si">#{</span> <span class="n">currentVersion</span> <span class="si">}</span><span class="s2">"</span>
      <span class="nb">puts</span> <span class="n">lint</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="c1"># If the dotfile already existed rewrite the original code</span>
  <span class="k">if</span> <span class="n">existed</span>
    <span class="n">writeVersion</span><span class="p">(</span><span class="n">old_version</span><span class="p">)</span>
  <span class="k">else</span>
    <span class="no">File</span><span class="p">.</span><span class="nf">delete</span><span class="p">(</span><span class="vg">$RBENV</span><span class="p">)</span> <span class="k">if</span> <span class="n">versionFileExists?</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">desc</span> <span class="s2">"Delete all podspec files"</span>
<span class="n">task</span> <span class="ss">:clean</span> <span class="k">do</span>
  <span class="no">Dir</span><span class="p">.</span><span class="nf">glob</span><span class="p">(</span><span class="s1">'*.podspec'</span><span class="p">).</span><span class="nf">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span> <span class="no">File</span><span class="p">.</span><span class="nf">delete</span><span class="p">(</span><span class="n">file</span><span class="p">)</span> <span class="p">}</span>
  <span class="no">Dir</span><span class="p">.</span><span class="nf">glob</span><span class="p">(</span><span class="vg">$RBENV</span><span class="p">).</span><span class="nf">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span> <span class="no">File</span><span class="p">.</span><span class="nf">delete</span><span class="p">(</span><span class="n">file</span><span class="p">)</span> <span class="p">}</span>
<span class="k">end</span>

<span class="c1"># Check to see if the current dotfile exists</span>
<span class="k">def</span> <span class="nf">versionFileExists?</span>
  <span class="no">File</span><span class="p">.</span><span class="nf">exists?</span><span class="p">(</span><span class="vg">$RBENV</span><span class="p">)</span>
<span class="k">end</span>

<span class="c1"># Retrieve the current version from the rbenv dotfile</span>
<span class="k">def</span> <span class="nf">currentVersion</span>
  <span class="no">File</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="vg">$RBENV</span><span class="p">,</span> <span class="s2">"r"</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">io</span><span class="o">|</span> <span class="n">io</span><span class="p">.</span><span class="nf">read</span> <span class="p">}</span>
<span class="k">end</span>

<span class="c1"># Write out a version to .rbenv-version</span>
<span class="k">def</span> <span class="nf">writeVersion</span><span class="p">(</span><span class="n">version</span><span class="p">)</span>
  <span class="no">File</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="vg">$RBENV</span><span class="p">,</span> <span class="s1">'w'</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span> <span class="n">file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="s2">"</span><span class="si">#{</span> <span class="n">version</span> <span class="si">}</span><span class="s2">"</span><span class="p">)</span> <span class="p">}</span>
<span class="k">end</span>

<span class="c1"># Run the lint</span>
<span class="k">def</span> <span class="nf">lint</span><span class="p">(</span><span class="n">podspec</span><span class="p">)</span>
  <span class="sx">%x[pod spec lint "</span><span class="si">#{</span> <span class="n">podspec</span> <span class="si">}</span><span class="sx">"]</span>
<span class="k">end</span></code></pre></figure>

]]>
      </content>
    </entry>
  
    <entry>
      <title type="html"><![CDATA[Spawning iTerm Windows]]></title>
      <link rel="alternate" type="text/html" href="http://smileykeith.com/2013/01/03/spawn-iterm/" />
      <id>http://smileykeith.com/2013/01/03/spawn-iterm</id>
      <updated>2013-01-03T12:34:00-08:00</updated>
      <author>
        
          <name><![CDATA[Keith Smiley]]></name>
        
      </author>
      <content type="html">
        <![CDATA[<p>I've recently been searching around for a good way to 'spawn' an <a href="http://www.iterm2.com/">iTerm</a> window (no I don't use tabs in iTerm), at the <code class="highlighter-rouge">pwd</code> in my current iTerm window. I couldn't find any good way to do it so I jumped in to AppleScript Editor and made something happen.</p>

<figure class="highlight"><pre><code class="language-applescript" data-lang="applescript"><span class="k">on</span> <span class="nb">run</span><span class="w"> </span><span class="nv">argv</span><span class="w">
	</span><span class="k">tell</span><span class="w"> </span><span class="nb">application</span><span class="w"> </span><span class="s2">"iTerm"</span><span class="w">
		</span><span class="k">set</span><span class="w"> </span><span class="nv">t</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="nb">make</span><span class="w"> </span><span class="nb">new</span><span class="w"> </span><span class="nv">terminal</span><span class="w">
		</span><span class="k">tell</span><span class="w"> </span><span class="nv">t</span><span class="w">
			</span><span class="nb">activate</span><span class="w"> </span><span class="nv">current</span><span class="w"> </span><span class="nv">session</span><span class="w">
			</span><span class="nb">launch</span><span class="w"> </span><span class="nv">session</span><span class="w"> </span><span class="s2">"Default Session"</span><span class="w">
			</span><span class="k">tell</span><span class="w"> </span><span class="nb">the</span><span class="w"> </span><span class="nb">last</span><span class="w"> </span><span class="nv">session</span><span class="w">
				</span><span class="nb">write</span><span class="w"> </span><span class="nb">text</span><span class="w"> </span><span class="s2">"cd \""</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="nb">item</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="nv">argv</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="s2">"\"; clear; pwd"</span><span class="w">
			</span><span class="k">end</span><span class="w"> </span><span class="k">tell</span><span class="w">
		</span><span class="k">end</span><span class="w"> </span><span class="k">tell</span><span class="w">
	</span><span class="k">end</span><span class="w"> </span><span class="k">tell</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="nb">run</span></code></pre></figure>

<p>I then added it to my <a href="http://www.zsh.org/">zsh</a> aliases with:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="k">function </span>spawn <span class="o">{</span>
  osascript ~/Dropbox/Code/Applescript/Spawn/SpawniTerm.applescript <span class="nv">$PWD</span>
<span class="o">}</span></code></pre></figure>

<p>Now I can call <code class="highlighter-rouge">spawn</code> from any iTerm or Terminal window to open a new iTerm session wherever I called it from.</p>
]]>
      </content>
    </entry>
  
    <entry>
      <title type="html"><![CDATA[NSWindow Global Hotkey]]></title>
      <link rel="alternate" type="text/html" href="http://smileykeith.com/2013/01/03/nswindow-global-hotkey/" />
      <id>http://smileykeith.com/2013/01/03/nswindow-global-hotkey</id>
      <updated>2013-01-03T10:44:00-08:00</updated>
      <author>
        
          <name><![CDATA[Keith Smiley]]></name>
        
      </author>
      <content type="html">
        <![CDATA[<p>For quite a while I was having trouble dealing with a global show/hide hotkey for windows in Objective-C. Global hotkeys are already <a href="http://stackoverflow.com/questions/4807319/register-hotkey">hard</a> <a href="https://github.com/keith/PTHotKeyTest">enough</a>. Although <a href="https://github.com/shpakovski/MASShortcut">MASShortcut</a> has solved that. Yes I know of <a href="http://wafflesoftware.net/shortcut/">ShortcutRecorder</a> but it's very dated (MASShortcut even uses blocks!).</p>

<p>I found that once I had the shortcut working I was having a hard time dealing with opening and closing, showing and hiding the application. What seemed to happen was when the method was called and <code class="highlighter-rouge">[[NSRunningApplication currentApplication] isActive]</code> was evaluated in an <code class="highlighter-rouge">if</code> statement along with an <code class="highlighter-rouge">else</code> clause, if the application was hidden using <code class="highlighter-rouge">[[NSApplication sharedApplication] hide:self];</code> it was reevaluated and it hit the <code class="highlighter-rouge">else</code> case. This also happened with an <code class="highlighter-rouge">if</code> statement checking if the window was already visible with <code class="highlighter-rouge">[myWindow isVisible]</code> even with <code class="highlighter-rouge">return;</code> statements inserted in appropriate places.</p>

<p>My solution was adding <code class="highlighter-rouge">NSNumber</code>s acting as booleans to keep track of the value allowing me to avoid <code class="highlighter-rouge">else</code> statements altogether and use <code class="highlighter-rouge">else if</code>s instead.</p>

<figure class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">showHideMainWindow</span> <span class="p">{</span>
    <span class="n">NSNumber</span> <span class="o">*</span><span class="n">wasActive</span> <span class="o">=</span> <span class="nb">@NO</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">([[</span><span class="n">NSRunningApplication</span> <span class="nf">currentApplication</span><span class="p">]</span> <span class="nf">isActive</span><span class="p">])</span> <span class="p">{</span>
        <span class="n">wasActive</span> <span class="o">=</span> <span class="nb">@YES</span><span class="p">;</span>
        <span class="n">NSNumber</span> <span class="o">*</span><span class="n">wasOpen</span> <span class="o">=</span> <span class="nb">@NO</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">([</span><span class="n">self</span><span class="p">.</span><span class="n">window</span> <span class="nf">isVisible</span><span class="p">])</span> <span class="p">{</span>
            <span class="n">wasOpen</span> <span class="o">=</span> <span class="nb">@YES</span><span class="p">;</span>
            <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">window</span> <span class="nf">close</span><span class="p">];</span>
            <span class="p">[[</span><span class="n">NSApplication</span> <span class="nf">sharedApplication</span><span class="p">]</span> <span class="nf">hide</span><span class="p">:</span><span class="n">self</span><span class="p">];</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">wasOpen</span> <span class="nf">boolValue</span><span class="p">])</span> <span class="p">{</span>
            <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">window</span> <span class="nf">makeKeyAndOrderFront</span><span class="p">:</span><span class="n">self</span><span class="p">];</span>
        <span class="p">}</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">wasActive</span> <span class="nf">boolValue</span><span class="p">])</span> <span class="p">{</span>
        <span class="p">[[</span><span class="n">NSApplication</span> <span class="nf">sharedApplication</span><span class="p">]</span> <span class="nf">activateIgnoringOtherApps</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
        <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">window</span> <span class="nf">makeKeyAndOrderFront</span><span class="p">:</span><span class="n">self</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

]]>
      </content>
    </entry>
  
    <entry>
      <title type="html"><![CDATA[Linode Setup]]></title>
      <link rel="alternate" type="text/html" href="http://smileykeith.com/2013/01/02/linode-setup/" />
      <id>http://smileykeith.com/2013/01/02/linode-setup</id>
      <updated>2013-01-02T15:19:00-08:00</updated>
      <author>
        
          <name><![CDATA[Keith Smiley]]></name>
        
      </author>
      <content type="html">
        <![CDATA[<p>I've been using <a href="http://www.linode.com/?r=c190426bf1ff0f144b48997675bae8b32d339824">Linode</a> for about the past 4 months. I was previously using <a href="http://www.hostmonster.com/">HostMonster</a> for all of my hosting, while I would recommend them 80% of the time, Linode and the nature of a VPS allows many things you cannot do with shared hosting.</p>

<p>I was looking around for some recommendations on how to deal with user accounts and permissions and ran across this great article that has almost every piece of information you need to get your server from nothing to deployed.</p>

<p>Linode allows you complete control over your VPS which, for beginners (like me when I started with Linode), difficult to get started with. Just follow this guide and you'll be good to go.</p>
]]>
      </content>
    </entry>
  
    <entry>
      <title type="html"><![CDATA[The fear of shipping]]></title>
      <link rel="alternate" type="text/html" href="http://smileykeith.com/2012/12/12/the-fear-of-shipping/" />
      <id>http://smileykeith.com/2012/12/12/the-fear-of-shipping</id>
      <updated>2012-12-12T17:42:00-08:00</updated>
      <author>
        
          <name><![CDATA[Keith Smiley]]></name>
        
      </author>
      <content type="html">
        <![CDATA[<p>Something I've become very aware of lately is how difficult it is for me to ship. I have at least a dozen unfinished projects that I could probably ship, yet I find any excuse to hold them back.</p>

<p>I could say forget it and ship it. Then depending on the amount of feedback I received, decide whether or not it was worth putting more time into. I often fall victim to "just one more feature here" or "oh it would be great if I added this first." When I should have just shipped.</p>

<p>After nearly convincing myself to do this, what is holding me back? The fear of ruining my first impressions. Up to this point my programming career, especially in public, has been pretty sparse. I've made a few websites, and I shipped an internal enterprise iOS app, but that doesn't count for much. So as far as most people know I sit at home on my thumbs 24/7 occasionally tweeting about Objective-C frameworks. I want to be perceived well in the community, I respect a lot of indie iOS and OS X developers and the last thing I want is attention for an unfinished or unpolished product. I am starting to realize that this is unrealistic. I would love my first major application to be perfect but that's just not feasible. I hope to get there in the future, but I am very close to accepting that getting there requires stepping stones. For me, those stepping stones might be some useless OS X utilities that I've made for myself and now want to share with the world. No matter how unpolished.</p>
]]>
      </content>
    </entry>
  
</feed>
